{"version":3,"file":"liquicode.js","mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;ACVa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI,gCAAgC;AAC9E;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oCAAoC;AAClD,cAAc,4CAA4C,8BAA8B;AACxF,cAAc,kFAAkF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI,gCAAgC;AAC9E;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,EAAE,6EAA4B;AACnD,gBAAgB,mBAAO,EAAE,iFAA8B;AACvD,eAAe,mBAAO,EAAE,+EAA6B;AACrD,gBAAgB,mBAAO,EAAE,iFAA8B;AACvD,eAAe,mBAAO,EAAE,+EAA6B;AACrD,iBAAiB,mBAAO,EAAE,mFAA+B;AACzD,gBAAgB,mBAAO,EAAE,iFAA8B;AACvD,kBAAkB,mBAAO,EAAE,qFAAgC;AAC3D;AACA;;;;;;;;;;;ACxNa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Da;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA,mCAAmC;AACnC,kCAAkC;AAClC,kCAAkC;AAClC;AACA;AACA,iDAAiD;AACjD,eAAe;AACf;AACA;AACA,sFAAsF;AACtF,2FAA2F;AAC3F,2FAA2F;AAC3F,2FAA2F;AAC3F,2FAA2F;AAC3F,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5Ia;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,QAAQ;AACpB;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB;AACxB;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,oDAAoD;AACpD,gEAAgE,cAAc;AAC9E;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9Ha;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,YAAY,GAAG;AACf;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB;AACxB;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,sCAAsC;AACtC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Ma;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,8BAA8B;AACrC,OAAO,4CAA4C,8BAA8B;AACjF,OAAO,kFAAkF;AACzF;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,mDAAmD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,YAAY,GAAG;AACf;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ,YAAY,mDAAmD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB,GAAG,oBAAoB;AAChF,uDAAuD,YAAY,GAAG,cAAc;AACpF;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvJa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,0CAA0C;AACtI;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA,gGAAgG,2CAA2C;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxKa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAO,EAAE,mEAAuB;AACzC,SAAS,mBAAO,EAAE,mEAAuB;AACzC;AACA,YAAY,mBAAO,EAAE,yEAA0B;AAC/C,WAAW,mBAAO,EAAE,uEAAyB;AAC7C,aAAa,mBAAO,EAAE,2EAA2B;AACjD,aAAa,mBAAO,EAAE,2EAA2B;AACjD,YAAY,mBAAO,EAAE,yEAA0B;AAC/C,YAAY,mBAAO,EAAE,yEAA0B;AAC/C;AACA,YAAY,mBAAO,EAAE,yEAA0B;AAC/C,iBAAiB,mBAAO,EAAE,mFAA+B;AACzD,UAAU,mBAAO,EAAE,qEAAwB;AAC3C;AACA,WAAW,mBAAO,EAAE,uEAAyB;AAC7C,SAAS,mBAAO,EAAE,mEAAuB;AACzC;AACA;AACA;;;;;;;;;;;AC7Ca;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAA0C;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxDa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,0CAA0C;AAChI,mFAAmF,0CAA0C;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtGa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;;AAGA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA,mFAAmF,MAAM;AACzF,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB;AAC/C;AACA;AACA,+EAA+E,IAAI;AACnF,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Ga;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Da;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Da;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,YAAY,QAAQ;AACpB,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Da;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Ea;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,wBAAwB;AACxqCAAqC;AACrC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO,6BAA6B,UAAU,GAAG,UAAU;AAClG;AACA;AACA;AACA,uCAAuC,SAAS,0BAA0B,YAAY;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Pa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,WAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnGa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA,YAAY,GAAG;AACf;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB,EAAE,MAAM,EAAE,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,2BAA2B,qCAAqC,iCAAiC;AACjG,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB,EAAE,IAAI,EAAE,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/Ka;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;;AAGA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Fa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;;AAGA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA,kDAAkD;AAClD,0CAA0C;AAC1C,mBAAmB,YAAY;AAC/B;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU,GAAG,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAO,EAAE,iEAAuB;AAC3C,WAAW,mBAAO,EAAE,iEAAuB;AAC3C,qBAAqB,mBAAO,EAAE,qFAAiC;AAC/D,aAAa,mBAAO,EAAE,qEAAyB;AAC/C,kBAAkB,mBAAO,EAAE,+EAA8B;AACzD,YAAY,mBAAO,EAAE,mEAAwB;AAC7C,kBAAkB,mBAAO,EAAE,+EAA8B;AACzD;AACA;AACA;;;;;;;;;;;ACpCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,yCAAyC;AAC7H,oFAAoF,yCAAyC;AAC7H,qGAAqG,0CAA0C;AAC/I;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5Fa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC;AACpH,oFAAoF,yCAAyC;AAC7H;AACA;AACA,8CAA8C,uBAAuB;AACrE,gCAAgC,0DAA0D;AAC1F,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC;AACpH,8GAA8G,0CAA0C;AACxJ,4GAA4G,yCAAyC;AACrJ,uFAAuF,yCAAyC;AAChI;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpGa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yCAAyC;AAC1H,4FAA4F,0CAA0C;AACtI;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yCAAyC;AAC1H,6FAA6F,yCAAyC;AACtI;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yCAAyC;AAC1H,4FAA4F,0CAA0C;AACtI;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yCAAyC;AAC1H,6FAA6F,yCAAyC;AACtI;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Ea;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAO,EAAE,6DAAqB;AACvC,iBAAiB,mBAAO,EAAE,6EAA6B;AACvD;AACA;;;;;;;;;;;AC7Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC;AACpH;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,sBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA,sBAAsB,6BAA6B;AACnD;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,yBAAyB;AACzB,uBAAuB;AACvB,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kCAAkC;AAChE,gCAAgC,aAAa,OAAO,OAAO;AAC3D,qCAAqC,YAAY,OAAO,OAAO;AAC/D,qCAAqC,aAAa,OAAO,KAAK;AAC9D;AACA;AACA;AACA,qBAAqB,KAAK,EAAE,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY,GAAG,aAAa,GAAG,YAAY,EAAE,aAAa,EAAE,YAAY;AACxF;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1da;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7Ca;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAO,EAAE,oFAAgC;AAC5D,YAAY,mBAAO,EAAE,sEAAyB;AAC9C;AACA;;;;;;;;;;;;AC7Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,qCAAqC;AACrC,wCAAwC;AACxC,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,WAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpGa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB,2DAA2D,MAAM;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,0BAA0B;AAC1B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,2CAA2C;AAC3C,sDAAsD;AACtD;AACA,0BAA0B;AAC1B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3Sa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAO,EAAE,6DAAqB;AACvC,cAAc,mBAAO,EAAE,uEAA0B;AACjD,gBAAgB,mBAAO,EAAE,2EAA4B;AACrD,cAAc,mBAAO,EAAE,uEAA0B;AACjD,gBAAgB,mBAAO,EAAE,2EAA4B;AACrD;AACA;;;;;;;;;;;AChCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,EAAE,cAAI;AAC7B,kBAAkB,mBAAO,EAAE,kBAAM;AACjC;AACA;AACA;AACA;AACA,+FAA+F,0CAA0C;AACzI,+FAA+F,0CAA0C;AACzI,mFAAmF,0CAA0C;AAC7H,sFAAsF,yCAAyC;AAC/H;AACA,6CAA6C;AAC7C;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxHa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,yCAAyC;AACzI,+FAA+F,0CAA0C;AACzI,oFAAoF,yCAAyC;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,0CAA0C;AACzI,oFAAoF,yCAAyC;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,0CAA0C;AACtI,sFAAsF,0CAA0C;AAChI,+FAA+F,0CAA0C;AACzI,0FAA0F,yCAAyC;AACnI,oFAAoF,yCAAyC;AAC7H;AACA,4CAA4C;AAC5C,gCAAgC,kBAAkB;AAClD;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7Ga;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,0CAA0C;AAC1H,+FAA+F,0CAA0C;AACzI,oFAAoF,yCAAyC;AAC7H;AACA,wCAAwC;AACxC;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9Fa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,EAAE,kFAAgC;AAC9D,mBAAmB,mBAAO,EAAE,8EAA8B;AAC1D;AACA;;;;;;;;;;;AC/Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,EAAE,kBAAM;AACjC,mBAAmB,mBAAO,EAAE,oBAAO;AACnC;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,yDAAyD;AACzD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5Ea;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,EAAE,kBAAM;AACjC,mBAAmB,mBAAO,EAAE,oBAAO;AACnC;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,yDAAyD;AACzD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9Ea;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAO,EAAE,kEAA4B;AACxD,mBAAmB,mBAAO,EAAE,kEAA4B;AACxD,iBAAiB,mBAAO,EAAE,0DAAwB;AAClD,iBAAiB,mBAAO,EAAE,0DAAwB;AAClD,kBAAkB,mBAAO,EAAE,8DAA0B;AACrD,iBAAiB,mBAAO,EAAE,0DAAwB;AAClD,gBAAgB,mBAAO,EAAE,sDAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://@liquicode/liquicodejs/webpack/universalModuleDefinition","webpack://@liquicode/liquicodejs/./src/000-Schema/000-Schema.js","webpack://@liquicode/liquicodejs/./src/000-Schema/010-Schema.ErrorValue.js","webpack://@liquicode/liquicodejs/./src/000-Schema/011-Schema.IsErrorValue.js","webpack://@liquicode/liquicodejs/./src/000-Schema/020-Schema.ValueSchema.js","webpack://@liquicode/liquicodejs/./src/000-Schema/021-Schema.DefaultValue.js","webpack://@liquicode/liquicodejs/./src/000-Schema/022-Schema.CoerceValue.js","webpack://@liquicode/liquicodejs/./src/000-Schema/023-Schema.ValidateValue.js","webpack://@liquicode/liquicodejs/./src/000-Schema/030-Schema.ObjectSchema.js","webpack://@liquicode/liquicodejs/./src/000-Schema/031-Schema.ValidateValues.js","webpack://@liquicode/liquicodejs/./src/100-Object/100-Object.js","webpack://@liquicode/liquicodejs/./src/100-Object/101-Object.Clone.js","webpack://@liquicode/liquicodejs/./src/100-Object/103-Object.Merge.js","webpack://@liquicode/liquicodejs/./src/100-Object/110-Object.Traverse.js","webpack://@liquicode/liquicodejs/./src/100-Object/111-Object.HasPath.js","webpack://@liquicode/liquicodejs/./src/100-Object/112-Object.FindField.js","webpack://@liquicode/liquicodejs/./src/100-Object/113-Object.FindValue.js","webpack://@liquicode/liquicodejs/./src/100-Object/114-Object.GetValue.js","webpack://@liquicode/liquicodejs/./src/100-Object/115-Object.SetValue.js","webpack://@liquicode/liquicodejs/./src/100-Object/120-Object.FromJson.js","webpack://@liquicode/liquicodejs/./src/100-Object/121-Object.ToJsonOptions.js","webpack://@liquicode/liquicodejs/./src/100-Object/122-Object.ToJson.js","webpack://@liquicode/liquicodejs/./src/100-Object/125-Object.FromIni.js","webpack://@liquicode/liquicodejs/./src/100-Object/126-Object.ToIni.js","webpack://@liquicode/liquicodejs/./src/200-Text/200-Text.js","webpack://@liquicode/liquicodejs/./src/200-Text/202-Text.Compare.js","webpack://@liquicode/liquicodejs/./src/200-Text/203-Text.Matches.js","webpack://@liquicode/liquicodejs/./src/200-Text/210-Text.ReplaceCharacters.js","webpack://@liquicode/liquicodejs/./src/200-Text/220-Text.FirstWord.js","webpack://@liquicode/liquicodejs/./src/200-Text/221-Text.AfterFirstWord.js","webpack://@liquicode/liquicodejs/./src/200-Text/222-Text.LastWord.js","webpack://@liquicode/liquicodejs/./src/200-Text/223-Text.BeforeLastWord.js","webpack://@liquicode/liquicodejs/./src/400-Date/400-Date.js","webpack://@liquicode/liquicodejs/./src/400-Date/401-Date.Parse.js","webpack://@liquicode/liquicodejs/./src/400-Date/410-Date.ZuluTimestamp.js","webpack://@liquicode/liquicodejs/./src/500-Token/500-Token.js","webpack://@liquicode/liquicodejs/./src/500-Token/501-Token.TokenizeOptions.js","webpack://@liquicode/liquicodejs/./src/500-Token/502-Token.Tokenize.js","webpack://@liquicode/liquicodejs/./src/800-File/800-File.js","webpack://@liquicode/liquicodejs/./src/800-File/810-File.Visit.js","webpack://@liquicode/liquicodejs/./src/800-File/811-File.CountFiles.js","webpack://@liquicode/liquicodejs/./src/800-File/812-File.CountFolders.js","webpack://@liquicode/liquicodejs/./src/800-File/813-File.CopyFolder.js","webpack://@liquicode/liquicodejs/./src/800-File/814-File.DeleteFolder.js","webpack://@liquicode/liquicodejs/./src/900-Net/900-Net.js","webpack://@liquicode/liquicodejs/./src/900-Net/910-Net.AsyncDownloadFile.js","webpack://@liquicode/liquicodejs/./src/900-Net/920-Net.AsyncGetRequest.js","webpack://@liquicode/liquicodejs/./src/liquicode-node.js","webpack://@liquicode/liquicodejs/external node-commonjs \"fs\"","webpack://@liquicode/liquicodejs/external node-commonjs \"http\"","webpack://@liquicode/liquicodejs/external node-commonjs \"https\"","webpack://@liquicode/liquicodejs/external node-commonjs \"path\"","webpack://@liquicode/liquicodejs/webpack/bootstrap","webpack://@liquicode/liquicodejs/webpack/before-startup","webpack://@liquicode/liquicodejs/webpack/startup","webpack://@liquicode/liquicodejs/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '000',\r\n\tname: 'Schema',\r\n\ttype: 'namespace',\r\n\tsummary: 'Data value and type handling',\r\n\tdescription: `\r\n\r\n**The FieldSchema Object**\r\n\r\n~~~javascript\r\nFieldSchema = {\r\n\ttype: '',\t\t\t\t// Javascript data type (boolean, number, string, object).\r\n\tformat: '',\t\t\t\t// A data type specific designation.\r\n\tdefault: undefined,\t\t// A default value used for missing fields.\r\n\tname: '',\t\t\t\t// Name of the field.\r\n}\r\n~~~\r\n\r\nLiquicodeJS can classify and identify value types beyond the primitive data types supported by Javascript.\r\nWhen obtaining FieldSchema objects from \"Schema.ValueSchema()\" or \"Schema.ObjectSchema()\",\r\n\"FieldSchema.type\" will contain the Javascript data type and \"FieldSchema.format\" will have a more specific type description.\r\n\r\nPossible values for \"FieldSchema.type\" and \"FieldSchema.format\" are as follows:\r\n\r\n| Type    | Format        | Default Value | Examples                          |\r\n|---------|---------------|---------------|-----------------------------------|\r\n| boolean | boolean       | false         | true, or false                    |\r\n| number  | integer       | 0             | 1, 2, or 3.0                      |\r\n| number  | float         | 0             | 1.1, 2.071, or 3.14               |\r\n| string  | string        | \"\"            | Hello', or ''                     |\r\n| object  | object        | {}            | { foo: 'bar' }                    |\r\n| object  | array         | []            | [ 1, 'two', 3.14, null ]          |\r\n| object  | boolean-array | []            | [ true, false, true ]             |\r\n| object  | number-array  | []            | [ 1, 2, 3.14 ]                    |\r\n| object  | string-array  | []            | [ 'one', 'two', 'three' ]         |\r\n| object  | object-array  | []            | [ { foo: 'bar' }, [1,2,3], null ] |\r\n| object  | array-array   | []            | [ [1,2,3], [], [4,5] ]            |\r\n\r\n\r\n**The ErrorValue Object**\r\n\r\n~~~javascript\r\nErrorValue = {\r\n\tok: false,\t\t// Always set to \"false\".\r\n\terror: '',\t\t// Error message.\r\n\tcontext: '',\t// Context for the error (e.g. a function name).\r\n}\r\n~~~\r\n\r\nLiquicodeJS introduces an \"ErrorValue\" object that it can use to indicate errors.\r\nSome functions will optionally return an \"ErrorValue\" object instead of throwing a Javascript Error.\r\nIn some cases, this can make code more efficient and legible when certain errors are tolerable\r\nand you want to avoid the expensive cost of a Javascript Error that includes a call stack.\r\n\r\nUse the \"Schema.ErrorValue()\" function to create ErrorValue objects and \"Schema.IsErrorValue()\" to test for errors.\r\nAn ErrorValue will always have \"ErrorValue.ok = false\" and \"ErrorValue.error\" equal to a string.\r\n\r\n\r\n**Value Coercion**\r\n\r\nThe functions \"Schema.CoerceValue()\", \"Schema.ValidateValue()\", and \"Schema.ValidateObject()\" can optionally coerce values\r\nfrom their given type to the types specified in Schema.\r\n\r\nThis tables describes how values are converted from one data type to another during coercion:\r\n\r\n| From Type | To Boolean     | To Number      | To String        | To Object      |\r\n|-----------|----------------|----------------|------------------|----------------|\r\n| undefined | DefaultValue() | DefaultValue() | DefaultValue()   | DefaultValue() |\r\n| null      | DefaultValue() | DefaultValue() | DefaultValue()   | DefaultValue() |\r\n| Boolean   | Value          | Number()       | toString()       | ErrorValue     |\r\n| Number    | Boolean()      | Value          | toString()       | ErrorValue     |\r\n| String    | Boolean()      | Number()       | Value            | JSON.parse()   |\r\n| Object    | Boolean()      | Number()       | JSON.stringify() | Value          |\r\n\r\n\r\n**Object Schema and Validation**\r\n\r\nAll of this is very interesting, I am sure.\r\n\r\nThe functions \"Schema.ObjectSchema()\" and \"Schema.ValidateObject()\" take these concepts to the next level and\r\nprovides schemas functionality on an object level rather than an individual value level.\r\n\r\n\r\n**Additional References***\r\n\r\n- [You Don't Know JS: Types & Grammar - Chapter 4. Coercion](https://www.oreilly.com/library/view/you-dont-know/9781491905159/ch04.html)\r\n\r\n`,\r\n\texamples: [\r\n\t\t`Schema = { name: 'PersonName', type: 'string' }`,\r\n\t\t`Schema = { name: 'options', type: 'object', default: { hoist: true, swab: 'decks' } }`,\r\n\t\t`Schema = { name: 'max_tries', type: 'number', format: 'integer', required: true, default: 3 }`,\r\n\t],\r\n\ttodo: [\r\n\t\t'Support extended number formats: positive-integer, negative-integer, positive-float, negative-float',\r\n\t\t'Support type: function',\r\n\t\t'Support format plugin-ins. Must implement: get_default(), is_type_of(value), can_coerce(type), coerce(value)',\r\n\t],\r\n\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\n * @public\n * @namespace Schema\n * @summary Data value and type handling\n * @description\n * \n\n**The FieldSchema Object**\n\n~~~javascript\nFieldSchema = {\n\ttype: '',\t\t\t\t// Javascript data type (boolean, number, string, object).\n\tformat: '',\t\t\t\t// A data type specific designation.\n\tdefault: undefined,\t\t// A default value used for missing fields.\n\tname: '',\t\t\t\t// Name of the field.\n}\n~~~\n\nLiquicodeJS can classify and identify value types beyond the primitive data types supported by Javascript.\nWhen obtaining FieldSchema objects from \"Schema.ValueSchema()\" or \"Schema.ObjectSchema()\",\n\"FieldSchema.type\" will contain the Javascript data type and \"FieldSchema.format\" will have a more specific type description.\n\nPossible values for \"FieldSchema.type\" and \"FieldSchema.format\" are as follows:\n\n| Type    | Format        | Default Value | Examples                          |\n|---------|---------------|---------------|-----------------------------------|\n| boolean | boolean       | false         | true, or false                    |\n| number  | integer       | 0             | 1, 2, or 3.0                      |\n| number  | float         | 0             | 1.1, 2.071, or 3.14               |\n| string  | string        | \"\"            | Hello', or ''                     |\n| object  | object        | {}            | { foo: 'bar' }                    |\n| object  | array         | []            | [ 1, 'two', 3.14, null ]          |\n| object  | boolean-array | []            | [ true, false, true ]             |\n| object  | number-array  | []            | [ 1, 2, 3.14 ]                    |\n| object  | string-array  | []            | [ 'one', 'two', 'three' ]         |\n| object  | object-array  | []            | [ { foo: 'bar' }, [1,2,3], null ] |\n| object  | array-array   | []            | [ [1,2,3], [], [4,5] ]            |\n\n\n**The ErrorValue Object**\n\n~~~javascript\nErrorValue = {\n\tok: false,\t\t// Always set to \"false\".\n\terror: '',\t\t// Error message.\n\tcontext: '',\t// Context for the error (e.g. a function name).\n}\n~~~\n\nLiquicodeJS introduces an \"ErrorValue\" object that it can use to indicate errors.\nSome functions will optionally return an \"ErrorValue\" object instead of throwing a Javascript Error.\nIn some cases, this can make code more efficient and legible when certain errors are tolerable\nand you want to avoid the expensive cost of a Javascript Error that includes a call stack.\n\nUse the \"Schema.ErrorValue()\" function to create ErrorValue objects and \"Schema.IsErrorValue()\" to test for errors.\nAn ErrorValue will always have \"ErrorValue.ok = false\" and \"ErrorValue.error\" equal to a string.\n\n\n**Value Coercion**\n\nThe functions \"Schema.CoerceValue()\", \"Schema.ValidateValue()\", and \"Schema.ValidateObject()\" can optionally coerce values\nfrom their given type to the types specified in Schema.\n\nThis tables describes how values are converted from one data type to another during coercion:\n\n| From Type | To Boolean     | To Number      | To String        | To Object      |\n|-----------|----------------|----------------|------------------|----------------|\n| undefined | DefaultValue() | DefaultValue() | DefaultValue()   | DefaultValue() |\n| null      | DefaultValue() | DefaultValue() | DefaultValue()   | DefaultValue() |\n| Boolean   | Value          | Number()       | toString()       | ErrorValue     |\n| Number    | Boolean()      | Value          | toString()       | ErrorValue     |\n| String    | Boolean()      | Number()       | Value            | JSON.parse()   |\n| Object    | Boolean()      | Number()       | JSON.stringify() | Value          |\n\n\n**Object Schema and Validation**\n\nAll of this is very interesting, I am sure.\n\nThe functions \"Schema.ObjectSchema()\" and \"Schema.ValidateObject()\" take these concepts to the next level and\nprovides schemas functionality on an object level rather than an individual value level.\n\n\n**Additional References***\n\n- [You Don't Know JS: Types & Grammar - Chapter 4. Coercion](https://www.oreilly.com/library/view/you-dont-know/9781491905159/ch04.html)\n\n\n * @todo Support extended number formats: positive-integer, negative-integer, positive-float, negative-float\n * @todo Support type: function\n * @todo Support format plugin-ins. Must implement: get_default(), is_type_of(value), can_coerce(type), coerce(value)\n*/\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tErrorValue: require( './010-Schema.ErrorValue.js' )( Liquicode ).ErrorValue,\r\n\t\tIsErrorValue: require( './011-Schema.IsErrorValue.js' )( Liquicode ).IsErrorValue,\r\n\t\tValueSchema: require( './020-Schema.ValueSchema.js' )( Liquicode ).ValueSchema,\r\n\t\tDefaultValue: require( './021-Schema.DefaultValue.js' )( Liquicode ).DefaultValue,\r\n\t\tCoerceValue: require( './022-Schema.CoerceValue.js' )( Liquicode ).CoerceValue,\r\n\t\tValidateValue: require( './023-Schema.ValidateValue.js' )( Liquicode ).ValidateValue,\r\n\t\tObjectSchema: require( './030-Schema.ObjectSchema.js' )( Liquicode ).ObjectSchema,\r\n\t\tValidateValues: require( './031-Schema.ValidateValues.js' )( Liquicode ).ValidateValues,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '010',\r\n\tmember_of: 'Schema',\r\n\tname: 'ErrorValue',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\treturns_description: 'An ErrorValue object.',\r\n\tsummary: 'Returns an ErrorValue object containing error information.',\r\n\tdescription: [\r\n\t\t``,\r\n\t],\r\n\tParameters: {\r\n\t\tMessage: {\r\n\t\t\tname: 'Message',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: 'error',\r\n\t\t\tdescription: 'The error message.',\r\n\t\t},\r\n\t\tContext: {\r\n\t\t\tname: 'Context',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: undefined,\r\n\t\t\tdescription: 'Context for the error (e.g. a function name).',\r\n\t\t},\r\n\t},\r\n\ttodo: [],\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ErrorValue\n\t * @returns {object}\n\t * An ErrorValue object.\n\t * @summary Returns an ErrorValue object containing error information.\n\t * @description\n\t * \n\t * @param {string} [Message=\"error\"]\n\t * The error message.\n\t * @param {string} [Context]\n\t * Context for the error (e.g. a function name).\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ErrorValue( Message, Context )\r\n\t{\r\n\t\treturn {\r\n\t\t\tok: false,\r\n\t\t\terror: Message || 'error',\r\n\t\t\tcontext: Context,\r\n\t\t};\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tErrorValue: ErrorValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '011',\r\n\tmember_of: 'Schema',\r\n\tname: 'IsErrorValue',\r\n\ttype: 'function',\r\n\treturns: 'boolean',\r\n\treturns_description: 'True if Value is an ErrorValue object, otherwise false.',\r\n\tsummary: 'Tests if a Value is an ErrorValue object.',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: false,\r\n\t\t\tdescription: 'The value to test.',\r\n\t\t},\r\n\t},\r\n\ttodo: [],\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function IsErrorValue\n\t * @returns {boolean}\n\t * True if Value is an ErrorValue object, otherwise false.\n\t * @summary Tests if a Value is an ErrorValue object.\n\t * @param {object} [Value]\n\t * The value to test.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction IsErrorValue( Value )\r\n\t{\r\n\t\tif ( Value !== undefined )\r\n\t\t{\r\n\t\t\tif ( ( Value.ok == false )\r\n\t\t\t\t&& ( typeof Value.error === 'string' ) )\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tIsErrorValue: IsErrorValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '020',\r\n\tmember_of: 'Schema',\r\n\tname: 'ValueSchema',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\treturns_description: 'A FieldSchema object.',\r\n\tsummary: 'Returns a FieldSchema based upon a specific value.',\r\n\tdescription: [\r\n\t\t`\r\nThis function is used to obtain extended type information about a value.\r\nWhile it does return an entire FieldSchema object, only the \"FieldSchema.type\" and \"FieldSchema.format\" fields are set.\r\n`,\r\n\t],\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\trequired: false,\r\n\t\t\tdescription: 'The value to infer a schema from.',\r\n\t\t},\r\n\t},\r\n\ttodo: [],\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\r\n\t * @public\r\n\t * @function ValueSchema\r\n\t * @returns {object}\r\n\t * A FieldSchema object.\r\n\t * @summary Returns a FieldSchema based upon a specific value.\r\n\t * @description\r\n\t * \r\nThis function is used to obtain extended type information about a value.\r\nWhile it does return an entire FieldSchema object, only the \"FieldSchema.type\" and \"FieldSchema.format\" fields are set.\r\n\r\n\t * @param {*} [Value]\r\n\t * The value to infer a schema from.\r\n\t*/\r\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ValueSchema( Value )\r\n\t{\r\n\t\tlet schema = {\r\n\t\t\ttype: '',\r\n\t\t\tformat: '',\r\n\t\t\tdefault: undefined,\r\n\t\t\t// name: '',\r\n\t\t\t// required: false,\r\n\t\t\t// description: '',\r\n\t\t\t// examples: '',\r\n\t\t};\r\n\t\tif ( Value === undefined )\r\n\t\t{\r\n\t\t\t/* Do Nothing */\r\n\t\t}\r\n\t\telse if ( Value === null )\r\n\t\t{\r\n\t\t\t/* Do Nothing */\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tschema.type = typeof Value;\r\n\t\t\tswitch ( schema.type )\r\n\t\t\t{\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tschema.format = 'boolean';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tlet float_value = Number.parseFloat( Value );\r\n\t\t\t\t\tlet integer_value = Number.parseInt( Value );\r\n\t\t\t\t\tif ( integer_value === float_value )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tschema.format = 'integer';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tschema.format = 'float';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tschema.format = 'string';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tschema.format = 'object';\r\n\t\t\t\t\tif ( Array.isArray( Value ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet has_boolean = false;\r\n\t\t\t\t\t\tlet has_number = false;\r\n\t\t\t\t\t\tlet has_string = false;\r\n\t\t\t\t\t\tlet has_object = false;\r\n\t\t\t\t\t\tlet has_array = false;\r\n\t\t\t\t\t\tfor ( let index = 0; index < Value.length; index++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet type = typeof Value[ index ];\r\n\t\t\t\t\t\t\tif ( type === 'boolean' ) { has_boolean = true; }\r\n\t\t\t\t\t\t\tif ( type === 'number' ) { has_number = true; }\r\n\t\t\t\t\t\t\tif ( type === 'string' ) { has_string = true; }\r\n\t\t\t\t\t\t\tif ( type === 'object' ) \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif ( Array.isArray( Value[ index ] ) ) { has_array = true; }\r\n\t\t\t\t\t\t\t\telse { has_object = true; }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( has_boolean && !has_number && !has_string && !has_object && !has_array ) { schema.format = 'boolean-array'; }\r\n\t\t\t\t\t\telse if ( !has_boolean && has_number && !has_string && !has_object && !has_array ) { schema.format = 'number-array'; }\r\n\t\t\t\t\t\telse if ( !has_boolean && !has_number && has_string && !has_object && !has_array ) { schema.format = 'string-array'; }\r\n\t\t\t\t\t\telse if ( !has_boolean && !has_number && !has_string && has_object && !has_array ) { schema.format = 'object-array'; }\r\n\t\t\t\t\t\telse if ( !has_boolean && !has_number && !has_string && !has_object && has_array ) { schema.format = 'array-array'; }\r\n\t\t\t\t\t\telse { schema.format = 'array'; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn schema;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tValueSchema: ValueSchema,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '021',\r\n\tmember_of: 'Schema',\r\n\tname: 'DefaultValue',\r\n\ttype: 'function',\r\n\treturns: '*',\r\n\treturns_description: 'The default value.',\r\n\tsummary: 'Returns the default value for the FieldSchema.',\r\n\tdescription: `\r\nIf the FieldSchema specifies a default value, then that value will be returned.\r\nOtherwise, a default value is calculated based upon the type and format of the FieldSchema.\r\n\r\n| Type    | Format        | Default\r\n|---------|---------------|-----------\r\n| boolean | -             | false\r\n| number  | integer       | 0\r\n| number  | float         | 0\r\n| string  | -             | ''\r\n| object  | -             | {}\r\n| object  | array         | []\r\n| object  | boolean-array | []\r\n| object  | number-array  | []\r\n| object  | string-array  | []\r\n| object  | object-array  | []\r\n`,\r\n\tParameters: {\r\n\t\tSchema: {\r\n\t\t\tname: 'Schema',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'The schema to use when calculating a default value.',\r\n\t\t},\r\n\t\tThrowErrors: {\r\n\t\t\tname: 'ThrowErrors',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t\tdescription: 'Errors are thrown if true, otherwise an ErrorValue object is returned.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function DefaultValue\n\t * @returns {*}\n\t * The default value.\n\t * @summary Returns the default value for the FieldSchema.\n\t * @description\n\t * \nIf the FieldSchema specifies a default value, then that value will be returned.\nOtherwise, a default value is calculated based upon the type and format of the FieldSchema.\n\n| Type    | Format        | Default\n|---------|---------------|-----------\n| boolean | -             | false\n| number  | integer       | 0\n| number  | float         | 0\n| string  | -             | ''\n| object  | -             | {}\n| object  | array         | []\n| object  | boolean-array | []\n| object  | number-array  | []\n| object  | string-array  | []\n| object  | object-array  | []\n\n\t * @param {object} Schema\n\t * The schema to use when calculating a default value.\n\t * @param {boolean} [ThrowErrors]\n\t * Errors are thrown if true, otherwise an ErrorValue object is returned.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction DefaultValue( Schema, ThrowErrors )\r\n\t{\r\n\t\tfunction send_error( Message )\r\n\t\t{\r\n\t\t\tif ( ThrowErrors ) { throw new Error( Message ); }\r\n\t\t\treturn Liquicode.Schema.ErrorValue( Message, 'DefaultValue' );\r\n\t\t}\r\n\r\n\t\tif ( !Schema ) { return send_error( `The parameter [Schema] is missing.` ); }\r\n\t\tif ( !Schema.type ) { return send_error( `The parameter [Schema.type] is missing.` ); }\r\n\t\tlet schema_format = Schema.format ? Schema.format : Schema.type;\r\n\r\n\t\t// If a default exists, return it.\r\n\t\tif ( Schema.default !== undefined ) { return Schema.default; }\r\n\r\n\t\t// Calculate a default.\r\n\t\tswitch ( Schema.type )\r\n\t\t{\r\n\t\t\tcase 'boolean': return false;\r\n\r\n\t\t\tcase 'number': return 0;\r\n\r\n\t\t\tcase 'string': return '';\r\n\r\n\t\t\tcase 'object':\r\n\t\t\t\tif ( [ '', 'object' ].includes( schema_format ) ) { return {}; }\r\n\t\t\t\telse if ( schema_format.endsWith( 'array' ) ) { return []; }\r\n\t\t\t\treturn send_error( `[schema_format] has an invalid value [${schema_format}] for type [object].` );\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn send_error( `[Schema.type] has an invalid value [${Schema.type}].` );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tDefaultValue: DefaultValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '022',\r\n\tmember_of: 'Schema',\r\n\tname: 'CoerceValue',\r\n\ttype: 'function',\r\n\treturns: '*',\r\n\treturns_description: 'The coerced value or an error object.',\r\n\tsummary: `Attempt to coerce the Value parameter to match the Schema's type.`,\r\n\tdescription: `\r\n\r\nThis function uses the Schema to coerce the Value to a particular data type.\r\n\r\nIf the \"Schema.type\" === \"*\", then no validation or coercion is performed and the Value is returned.\r\nIf the \"Schema.type\" === \"function\", then no validation or coercion is performed and the Value is returned.\r\n\r\nIf Value is \"undefined\" or \"null\", then the default value for \"FieldSchema.type\" will be returned.\r\nThis is done by calling \"Schema.DefaultValue()\" for the FieldSchema.\r\n\r\n\"Schema.ValueSchema()\" is called the get the schema for Value, which is then compared against the expected Schema.\r\n\r\n\t`,\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: [\r\n\t\t\t\t'The value to coerce.',\r\n\t\t\t],\r\n\t\t},\r\n\t\tSchema: {\r\n\t\t\tname: 'Schema',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'The schema to use when coercing Value.',\r\n\t\t},\r\n\t\tThrowErrors: {\r\n\t\t\tname: 'ThrowErrors',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t\tdescription: 'Errors are thrown if true, otherwise an ErrorValue object is returned.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function CoerceValue\n\t * @returns {*}\n\t * The coerced value or an error object.\n\t * @summary Attempt to coerce the Value parameter to match the Schema's type.\n\t * @description\n\t * \n\nThis function uses the Schema to coerce the Value to a particular data type.\n\nIf the \"Schema.type\" === \"*\", then no validation or coercion is performed and the Value is returned.\nIf the \"Schema.type\" === \"function\", then no validation or coercion is performed and the Value is returned.\n\nIf Value is \"undefined\" or \"null\", then the default value for \"FieldSchema.type\" will be returned.\nThis is done by calling \"Schema.DefaultValue()\" for the FieldSchema.\n\n\"Schema.ValueSchema()\" is called the get the schema for Value, which is then compared against the expected Schema.\n\n\t\n\t * @param {*} Value\n\t * The value to coerce.\n\t * @param {object} Schema\n\t * The schema to use when coercing Value.\n\t * @param {boolean} [ThrowErrors]\n\t * Errors are thrown if true, otherwise an ErrorValue object is returned.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction CoerceValue( Value, Schema, ThrowErrors )\r\n\t{\r\n\t\tfunction send_error( Message )\r\n\t\t{\r\n\t\t\tif ( ThrowErrors ) { throw new Error( Message ); }\r\n\t\t\treturn Liquicode.Schema.ErrorValue( Message, 'CoerceValue' );\r\n\t\t}\r\n\r\n\t\tif ( !Schema ) { return send_error( `The parameter [Schema] is missing.` ); }\r\n\t\tif ( !Schema.type ) { return send_error( `The parameter [Schema.type] is missing.` ); }\r\n\t\tlet schema_format = Schema.format ? Schema.format : Schema.type;\r\n\r\n\t\t// If the schema allows any type, simply return the Value.\r\n\t\tif ( Schema.type === '*' ) { return Value; }\r\n\r\n\t\t// If the schema type is 'function', simply return the Value.\r\n\t\tif ( Schema.type === 'function' ) { return Value; }\r\n\r\n\t\t// If Value is undefined, return the default.\r\n\t\tif ( Value === undefined ) { return Liquicode.Schema.DefaultValue( Schema ); }\r\n\r\n\t\t// If Value is null, return the default.\r\n\t\tif ( Value === null ) { return Liquicode.Schema.DefaultValue( Schema ); }\r\n\r\n\t\t// Get the value schema.\r\n\t\tlet value_schema = Liquicode.Schema.ValueSchema( Value );\r\n\r\n\t\tswitch ( Schema.type )\r\n\t\t{\r\n\t\t\tcase 'boolean':\r\n\t\t\t\tswitch ( value_schema.type )\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 'boolean':\t\t\t// Convert boolean to number.\r\n\t\t\t\t\tcase 'number':\t\t\t// Convert number to number.\r\n\t\t\t\t\tcase 'string':\t\t\t// Convert string to number.\r\n\t\t\t\t\tcase 'object':\t\t\t// Convert object to number.\r\n\t\t\t\t\t\treturn Boolean( Value );\r\n\r\n\t\t\t\t\tdefault:\t\t\t\t// Error: Unknown value type.\r\n\t\t\t\t\t\treturn send_error( `Value has an unknown type [${value_schema.type}].` );\r\n\t\t\t\t}\r\n\r\n\t\t\tcase 'number':\r\n\t\t\t\tswitch ( value_schema.type )\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 'boolean':\t\t\t// Convert boolean to number.\r\n\t\t\t\t\tcase 'number':\t\t\t// Convert number to number.\r\n\t\t\t\t\tcase 'string':\t\t\t// Convert string to number.\r\n\t\t\t\t\t\tlet number_value = Number( Value );\r\n\t\t\t\t\t\tif ( isNaN( number_value ) )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnumber_value = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if ( schema_format === 'integer' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnumber_value = parseInt( number_value.toString() );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn number_value;\r\n\r\n\t\t\t\t\tcase 'object':\t\t\t// Convert object to number.\r\n\t\t\t\t\t\treturn send_error( `Unable to coerce a value from object to number.` );\r\n\r\n\t\t\t\t\tdefault:\t\t\t\t// Error: Unknown value type.\r\n\t\t\t\t\t\treturn send_error( `Value has an unknown type [${value_schema.type}].` );\r\n\t\t\t\t}\r\n\r\n\t\t\tcase 'string':\r\n\t\t\t\tswitch ( value_schema.type )\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 'boolean':\t\t\t// Convert boolean to string.\r\n\t\t\t\t\tcase 'number':\t\t\t// Convert number to string.\r\n\t\t\t\t\tcase 'string':\t\t\t// Convert string to string.\r\n\t\t\t\t\t\treturn Value.toString();\r\n\r\n\t\t\t\t\tcase 'object':\t\t\t// Convert object to string.\r\n\t\t\t\t\t\treturn JSON.stringify( Value );\r\n\r\n\t\t\t\t\tdefault:\t\t\t\t// Error: Unknown value type.\r\n\t\t\t\t\t\treturn send_error( `Value has an unknown type [${value_schema.type}].` );\r\n\t\t\t\t}\r\n\r\n\t\t\tcase 'object':\r\n\t\t\t\tswitch ( value_schema.type )\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 'boolean':\t\t\t// Convert boolean to object.\r\n\t\t\t\t\t\treturn send_error( `Unable to coerce a value from boolean to object.` );\r\n\r\n\t\t\t\t\tcase 'number':\t\t\t// Convert number to object.\r\n\t\t\t\t\t\treturn send_error( `Unable to coerce a value from number to object.` );\r\n\r\n\t\t\t\t\tcase 'string':\t\t\t// Convert string to object.\r\n\t\t\t\t\t\tlet json_value = Value.trim();\r\n\t\t\t\t\t\tif ( json_value.startsWith( '{' ) ) { return JSON.parse( json_value ); }\r\n\t\t\t\t\t\tif ( json_value.startsWith( '[' ) ) { return JSON.parse( json_value ); }\r\n\t\t\t\t\t\treturn send_error( `Unable to coerce a (non-json) value from string to object.` );\r\n\r\n\t\t\t\t\tcase 'object':\t\t\t// Convert object to object.\r\n\t\t\t\t\t\t// return JSON.parse( JSON.stringify( Value ) );\r\n\t\t\t\t\t\treturn Value;\r\n\r\n\t\t\t\t\tdefault:\t\t\t\t// Error: Unknown value type.\r\n\t\t\t\t\t\treturn send_error( `Value has an unknown type [${value_schema.type}].` );\r\n\t\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn send_error( `[Schema.type] has an invalid value [${Schema.type}].` );\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tCoerceValue: CoerceValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '023',\r\n\tmember_of: 'Schema',\r\n\tname: 'ValidateValue',\r\n\ttype: 'function',\r\n\treturns: '*',\r\n\treturns_description: 'The validated/coerced Value or an ErrorValue object.',\r\n\tsummary: 'Validates a field value according to a schema and optionally coerces the value to match.',\r\n\tdescription: `\r\n\r\nThis function uses \"Schema.type\", \"Schema.format\", \"Schema.required', and \"Schema.default\" to validate the given Value.\r\n\r\nIf \"Options.coerce = true\", then an attempt will be made to coerce the given value to match the type and format specified in the FieldSchema.\r\n(See: \"Schema.CoerceValue()\")\r\n\r\n\t`,\r\n\t// [\r\n\t// \t'Validate values according to a given schema.',\r\n\t// \t'Return the value if validation succeeds.',\r\n\t// \t'Otherwise, this function throws an error.',\r\n\t// \t'See the \"GetSchema()\" function for a more detailed explanation of schemas.',\r\n\t// ],\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: [\r\n\t\t\t\t'The value to validate.',\r\n\t\t\t],\r\n\t\t},\r\n\t\tSchema: {\r\n\t\t\tname: 'Schema',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'The FieldSchema object to validate against.',\r\n\t\t\texamples: [\r\n\t\t\t\t`{ name: 'Name', type: 'string' }`,\r\n\t\t\t\t`{ name: 'options', type: 'object', default: { hoist: true, swab: 'decks' } }`,\r\n\t\t\t\t`{ name: 'max_tries', type: 'number', format: 'integer', required: true, default: 3 }`,\r\n\t\t\t]\r\n\t\t},\r\n\t\tOptions: {\r\n\t\t\tname: 'Options',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: \"{ coerce: false, throw_errors: false, context: null }\",\r\n\t\t\tdescription: `An options object to control validation:\r\n~~~javascript\r\nOptions = {\r\n\tcoerce_values: false,\t// Attempt to coerce the provided value to match the schema's type.\r\n\tthrow_errors: false,\t// When true, throw an error validation errors are encountered.\r\n\tcontext: null,\t\t\t// A context name (function name) to include in any error messages.\r\n}\r\n~~~`,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ValidateValue\n\t * @returns {*}\n\t * The validated/coerced Value or an ErrorValue object.\n\t * @summary Validates a field value according to a schema and optionally coerces the value to match.\n\t * @description\n\t * \n\nThis function uses \"Schema.type\", \"Schema.format\", \"Schema.required', and \"Schema.default\" to validate the given Value.\n\nIf \"Options.coerce = true\", then an attempt will be made to coerce the given value to match the type and format specified in the FieldSchema.\n(See: \"Schema.CoerceValue()\")\n\n\t\n\t * @param {*} Value\n\t * The value to validate.\n\t * @param {object} Schema\n\t * The FieldSchema object to validate against.\n\t * @param {object} [Options=\"{ coerce: false, throw_errors: false, context: null }\"]\n\t * An options object to control validation:\n~~~javascript\nOptions = {\n\tcoerce_values: false,\t// Attempt to coerce the provided value to match the schema's type.\n\tthrow_errors: false,\t// When true, throw an error validation errors are encountered.\n\tcontext: null,\t\t\t// A context name (function name) to include in any error messages.\n}\n~~~\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ValidateValue( Value, Schema, Options )\r\n\t{\r\n\t\tfunction send_error( Message )\r\n\t\t{\r\n\t\t\tif ( Options.throw_errors ) { throw new Error( Message ); }\r\n\t\t\treturn Liquicode.Schema.ErrorValue( Message, 'ValidateValue' );\r\n\t\t}\r\n\r\n\t\t// Validate the parameters.\r\n\t\tif ( Options === undefined ) { Options = {}; }\r\n\t\tOptions.coerce_values = ( Options.coerce_values === true );\r\n\t\tOptions.throw_errors = ( Options.throw_errors === true );\r\n\t\tOptions.context = Options.context || '';\r\n\t\tif ( !Schema ) { return send_error( `The parameter [Schema] is missing.` ); }\r\n\t\tif ( !Schema.type ) { return send_error( `The parameter [Schema.type] is missing.` ); }\r\n\t\tlet schema_format = Schema.format ? Schema.format : Schema.type;\r\n\r\n\t\t// Get the value schema.\r\n\t\tlet value_schema = Liquicode.Schema.ValueSchema( Value );\r\n\r\n\t\t// Compare the schemas.\r\n\t\tif ( Schema.type === value_schema.type )\r\n\t\t{\r\n\t\t\tif ( schema_format === value_schema.format )\r\n\t\t\t{\r\n\t\t\t\treturn Value;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( !Options.coerce_values )\r\n\t\t{\r\n\t\t\tlet message = `The value of type [${value_schema.type}|${value_schema.format}]`;\r\n\t\t\tmessage += ` does not match the expected type of [${Schema.type}|${schema_format}].`;\r\n\t\t\treturn send_error( message );\r\n\t\t}\r\n\r\n\t\t// Coerce the value.\r\n\t\tlet coerced_value = Liquicode.Schema.CoerceValue( Value, Schema, Options.throw_errors );\r\n\t\tif ( Liquicode.Schema.IsErrorValue( coerced_value ) ) { return coerced_value; }\r\n\r\n\t\treturn coerced_value;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tValidateValue: ValidateValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '030',\r\n\tmember_of: 'Schema',\r\n\tname: 'ObjectSchema',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\treturns_description: 'An array of FieldSchema.',\r\n\tsummary: 'Returns an array of FieldSchema describing the top-most members of \"FromObject\".',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tFromObject: {\r\n\t\t\tname: 'FromObject',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'An object to retrieve the schema for.',\r\n\t\t},\r\n\t},\r\n\ttodo: [],\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ObjectSchema\n\t * @returns {object}\n\t * An array of FieldSchema.\n\t * @summary Returns an array of FieldSchema describing the top-most members of \"FromObject\".\n\t * @param {object} FromObject\n\t * An object to retrieve the schema for.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ObjectSchema( FromObject )\r\n\t{\r\n\t\tFromObject = Liquicode.Schema.ValidateValue( FromObject, _Schema.Parameters.FromObject, { coerce_values: true, throw_errors: true } );\r\n\r\n\t\tlet schema_array = [];\r\n\t\tlet object_keys = Object.keys( FromObject );\r\n\t\tfor ( let key_index = 0; key_index < object_keys.length; key_index++ )\r\n\t\t{\r\n\t\t\tlet object_key = object_keys[ key_index ];\r\n\t\t\tlet schema = Liquicode.Schema.ValueSchema( FromObject[ object_key ] );\r\n\t\t\tschema.name = object_key;\r\n\t\t\tschema_array.push( schema );\r\n\t\t}\r\n\t\treturn schema_array;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tObjectSchema: ObjectSchema,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '031',\r\n\tmember_of: 'Schema',\r\n\tname: 'ValidateValues',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\treturns_description: 'An object containing the validation result.',\r\n\tsummary: 'Validate a set of values against an array of FieldSchema.',\r\n\tdescription: `\r\n\r\nTakes an array of Values and an array of FieldSchema to validate a number of fields at once.\r\nThis function does not throw validation errors.\r\nInstead, all validation errors are returned to the caller in the return value.\r\nAdditionally, the number of fields processed and a set of coerced values is also returned.\r\n\r\n**The Return Value**\r\n\r\n~~~javascript\r\nReturnValue = {\r\n\tfield_count: 0,\t\t\t\t// The number of fields processed.\r\n\tvalidation_errors: [],\t\t// All validation errors encountered.\r\n\tcoerced_values: [],\t\t\t// An array of coerced values.\r\n}\r\n~~~\r\n`,\r\n\tParameters: {\r\n\t\tValues: {\r\n\t\t\tname: 'Values',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'The values to validate. This can be an array of values, or an object described by Schemas.',\r\n\t\t},\r\n\t\tSchemas: {\r\n\t\t\tname: 'Schemas',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'An array of FieldSchemas to validate the Values with. Can also be an object whose top-most fields are instances of FieldSchema.',\r\n\t\t},\r\n\t},\r\n\ttodo: [],\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ValidateValues\n\t * @returns {object}\n\t * An object containing the validation result.\n\t * @summary Validate a set of values against an array of FieldSchema.\n\t * @description\n\t * \n\nTakes an array of Values and an array of FieldSchema to validate a number of fields at once.\nThis function does not throw validation errors.\nInstead, all validation errors are returned to the caller in the return value.\nAdditionally, the number of fields processed and a set of coerced values is also returned.\n\n**The Return Value**\n\n~~~javascript\nReturnValue = {\n\tfield_count: 0,\t\t\t\t// The number of fields processed.\n\tvalidation_errors: [],\t\t// All validation errors encountered.\n\tcoerced_values: [],\t\t\t// An array of coerced values.\n}\n~~~\n\n\t * @param {object} Values\n\t * The values to validate. This can be an array of values, or an object described by Schemas.\n\t * @param {object} Schemas\n\t * An array of FieldSchemas to validate the Values with. Can also be an object whose top-most fields are instances of FieldSchema.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ValidateValues( Values, Schemas )\r\n\t{\r\n\t\tlet validation_result = {\r\n\t\t\tfield_count: 0,\t\t\t\t// The number of fields processed.\r\n\t\t\tvalidation_errors: [],\t\t// All validation errors encountered.\r\n\t\t\tcoerced_values: [],\t\t\t// An array of coerced values.\r\n\t\t};\r\n\r\n\t\tlet value_array = null;\r\n\t\tlet schema_array = null;\r\n\r\n\t\t// Validate the Values.\r\n\t\tif ( !Values ) { throw new Error( `The parameter [Values] is missing. Must be an object or array of values.` ); }\r\n\t\tif ( typeof Values !== 'object' ) { throw new Error( `The parameter [Values] is not an object. Must be an object or array of values.` ); }\r\n\t\tif ( Array.isArray( Values ) )\r\n\t\t{\r\n\t\t\tvalue_array = Values;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvalue_array = [];\r\n\t\t\tlet keys = Object.keys( Values );\r\n\t\t\tfor ( let index = 0; index < keys.length; index++ )\r\n\t\t\t{\r\n\t\t\t\tvalue_array.push( Values[ keys[ index ] ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate the Schemas.\r\n\t\tif ( !Schemas ) { throw new Error( `The parameter [Schemas] is missing. Must be an object or array of FieldSchema.` ); }\r\n\t\tif ( typeof Schemas !== 'object' ) { throw new Error( `The parameter [Schemas] is not an object. Must be an object or array of values.` ); }\r\n\t\tif ( Array.isArray( Schemas ) )\r\n\t\t{\r\n\t\t\tschema_array = Schemas;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tschema_array = [];\r\n\t\t\tlet keys = Object.keys( Schemas );\r\n\t\t\tfor ( let index = 0; index < keys.length; index++ )\r\n\t\t\t{\r\n\t\t\t\tschema_array.push( Schemas[ keys[ index ] ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate the fields\r\n\t\tfor ( let index = 0; index < schema_array.length; index++ )\r\n\t\t{\r\n\t\t\tif ( index < value_array.length )\r\n\t\t\t{\r\n\t\t\t\tlet result = Liquicode.Schema.ValidateValue( value_array[ index ], schema_array[ index ], { coerce_values: true, throw_errors: false } );\r\n\t\t\t\tif ( Liquicode.Schema.IsErrorValue( result ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tvalidation_result.field_count++;\r\n\t\t\t\t\tvalidation_result.coerced_values.push( undefined );\r\n\t\t\t\t\tvalidation_result.validation_errors.push( result.error );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tvalidation_result.field_count++;\r\n\t\t\t\t\tvalidation_result.coerced_values.push( result );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet field_name = schema_array[ index ].name;\r\n\t\t\t\tif ( !field_name ) { field_name = '#' + ( index + 1 ); }\r\n\t\t\t\tvalidation_result.field_count++;\r\n\t\t\t\tvalidation_result.coerced_values.push( undefined );\r\n\t\t\t\tvalidation_result.validation_errors.push( `Field [${field_name}] is missing.` );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn validation_result;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tValidateValues: ValidateValues,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '100',\r\n\tname: 'Object',\r\n\ttype: 'namespace',\r\n\tsummary: 'Functions for manipulating Javascript objects.',\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\n * @public\n * @namespace Object\n * @summary Functions for manipulating Javascript objects.\n*/\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\r\n\t\tClone: require( './101-Object.Clone.js' )( Liquicode ).Clone,\r\n\t\tMerge: require( './103-Object.Merge.js' )( Liquicode ).Merge,\r\n\t\t\r\n\t\tTraverse: require( './110-Object.Traverse.js' )( Liquicode ).Traverse,\r\n\t\tHasPath: require( './111-Object.HasPath.js' )( Liquicode ).HasPath,\r\n\t\tFindField: require( './112-Object.FindField.js' )( Liquicode ).FindField,\r\n\t\tFindValue: require( './113-Object.FindValue.js' )( Liquicode ).FindValue,\r\n\t\tGetValue: require( './114-Object.GetValue.js' )( Liquicode ).GetValue,\r\n\t\tSetValue: require( './115-Object.SetValue.js' )( Liquicode ).SetValue,\r\n\r\n\t\tFromJson: require( './120-Object.FromJson.js' )( Liquicode ).FromJson,\r\n\t\tToJsonOptions: require( './121-Object.ToJsonOptions.js' )( Liquicode ).ToJsonOptions,\r\n\t\tToJson: require( './122-Object.ToJson.js' )( Liquicode ).ToJson,\r\n\r\n\t\tFromIni: require( './125-Object.FromIni.js' )( Liquicode ).FromIni,\r\n\t\tToIni: require( './126-Object.ToIni.js' )( Liquicode ).ToIni,\r\n\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '101',\r\n\tmember_of: 'Object',\r\n\tname: 'Clone',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns a clone of the given object.',\r\n\t\t'This is equivalent to doing A = JSON.parse( JSON.stringify( B ) ).',\r\n\t],\r\n\tParameters: {\r\n\t\tFrom: {\r\n\t\t\tname: 'From',\r\n\t\t\ttype: 'object',\r\n\t\t\t// required: true,\r\n\t\t\tdefault: {},\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Clone\n\t * @returns {string}\n\t * @description\n\t * Returns a clone of the given object.\n\t * This is equivalent to doing A = JSON.parse( JSON.stringify( B ) ).\n\t * @param {object} [From={}]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Clone( From )\r\n\t{\r\n\t\tFrom = Liquicode.Schema.ValidateValue( From, _Schema.Parameters.From, { coerce_values: true, throw_errors: true } );\r\n\t\treturn JSON.parse( JSON.stringify( From ) );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tClone: Clone,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '103',\r\n\tmember_of: 'Object',\r\n\tname: 'Merge',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tOriginal: {\r\n\t\t\tname: 'Original',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tUpdates: {\r\n\t\t\tname: 'Updates',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: false,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Merge\n\t * @returns {object}\n\t * @param {object} Original\n\t * @param {object} [Updates]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Merge( Original, Updates )\r\n\t{\r\n\t\tOriginal = Liquicode.Schema.ValidateValue( Original, _Schema.Parameters.Original, { coerce_values: true, throw_errors: true } );\r\n\t\tUpdates = Liquicode.Schema.ValidateValue( Updates, _Schema.Parameters.Updates, { coerce_values: true, throw_errors: true } );\r\n\r\n\t\tlet new_object = JSON.parse( JSON.stringify( Original ) );\r\n\r\n\t\tfunction update_children( ParentA, ParentB )\r\n\t\t{\r\n\t\t\tObject.keys( ParentB ).forEach(\r\n\t\t\t\tkey =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = ParentB[ key ];\r\n\t\t\t\t\tif ( ParentA[ key ] === undefined )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParentA[ key ] = JSON.parse( JSON.stringify( value ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( typeof value === 'object' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Merge objects.\r\n\t\t\t\t\t\t\tif ( ( ParentA[ key ] === null ) && ( value === null ) )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Do nothing.\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if ( ( ParentA[ key ] !== null ) && ( value === null ) )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tParentA[ key ] = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if ( ( ParentA[ key ] === null ) && ( value !== null ) )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tParentA[ key ] = {};\r\n\t\t\t\t\t\t\t\tupdate_children( ParentA[ key ], value );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if ( ( ParentA[ key ] !== null ) && ( value !== null ) )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tupdate_children( ParentA[ key ], value );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Overwrite values.\r\n\t\t\t\t\t\t\tParentA[ key ] = JSON.parse( JSON.stringify( value ) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t}\r\n\r\n\t\tupdate_children( new_object, Updates );\r\n\t\treturn new_object;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tMerge: Merge,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '110',\r\n\tmember_of: 'Object',\r\n\tname: 'Traverse',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: `\r\n\r\nTraverses and calls a visitor callback function for each field in an object.\r\nThis functions recurses through sub-objects and traverses the entire object.\r\n\r\n`,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tVisitor: {\r\n\t\t\tname: 'Visitor',\r\n\t\t\ttype: 'function',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Traverse\n\t * @returns {string}\n\t * @description\n\t * \n\nTraverses and calls a visitor callback function for each field in an object.\nThis functions recurses through sub-objects and traverses the entire object.\n\n\n\t * @param {object} Root\n\t * @param {function} Visitor\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Traverse( Root, Visitor )\r\n\t{\r\n\t\t// Root = Root || {};\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\t// Visitor = Liquicode.Schema.CoerceValue( Visitor, _Schema.Parameters.Visitor, true );\r\n\r\n\t\t//---------------------------------------------------------------------\r\n\t\tfunction traverse_recurse( Visitor, Parent, Name, Value, Path, Depth )\r\n\t\t{\r\n\t\t\tlet info =\r\n\t\t\t{\r\n\t\t\t\tparent: Parent,\r\n\t\t\t\tname: Name,\r\n\t\t\t\tvalue: Value,\r\n\t\t\t\tpath: Path,\r\n\t\t\t\tdepth: Depth,\r\n\t\t\t};\r\n\t\t\tlet result = Visitor( info );\r\n\t\t\tif ( typeof result !== 'undefined' ) { return result; }\r\n\r\n\t\t\tif ( typeof Value === 'object' )\r\n\t\t\t{\r\n\t\t\t\tif ( Value === null ) { return; }\r\n\t\t\t\tif ( Array.isArray( Value ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tfor ( let index = 0; index < Value.length; index++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = traverse_recurse( Visitor, Value, index, Value[ index ], Path + `[${index}]`, Depth + 1 );\r\n\t\t\t\t\t\tif ( typeof result !== 'undefined' ) { return result; }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlet keys = Object.keys( Value );\r\n\t\t\t\t\tfor ( let index = 0; index < keys.length; index++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet key = keys[ index ];\r\n\t\t\t\t\t\tresult = traverse_recurse( Visitor, Value, key, Value[ key ], Path + `.${key}`, Depth + 1 );\r\n\t\t\t\t\t\tif ( typeof result !== 'undefined' ) { return result; }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//---------------------------------------------------------------------\r\n\t\treturn traverse_recurse( Visitor, null, '$', Root, '$', 0 );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tTraverse: Traverse,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '111',\r\n\tmember_of: 'Object',\r\n\tname: 'HasPath',\r\n\ttype: 'function',\r\n\treturns: 'boolean',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tPath: {\r\n\t\t\tname: 'Path',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function HasPath\n\t * @returns {boolean}\n\t * @param {object} Root\n\t * @param {string} Path\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction HasPath( Root, Path )\r\n\t{\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\tPath = Liquicode.Schema.CoerceValue( Path, _Schema.Parameters.Path, true );\r\n\r\n\t\tlet result = Liquicode.Object.Traverse( Root,\r\n\t\t\tfunction ( info )\r\n\t\t\t{\r\n\t\t\t\tif ( info.path === Path ) { return true; }\r\n\t\t\t} );\r\n\r\n\t\treturn ( result === true );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tHasPath: HasPath,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '112',\r\n\tmember_of: 'Object',\r\n\tname: 'FindField',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tName: {\r\n\t\t\tname: 'Name',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function FindField\n\t * @returns {string}\n\t * @param {object} Root\n\t * @param {string} Name\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction FindField( Root, Name )\r\n\t{\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\tName = Liquicode.Schema.CoerceValue( Name, _Schema.Parameters.Name, true );\r\n\r\n\t\tlet result = Liquicode.Object.Traverse( Root,\r\n\t\t\tfunction ( info )\r\n\t\t\t{\r\n\t\t\t\tif ( info.name === Name ) { return info.path; }\r\n\t\t\t} );\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tFindField: FindField,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '113',\r\n\tmember_of: 'Object',\r\n\tname: 'FindValue',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tsummary: 'Locate a value stored within an object.',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\trequired: true,\r\n\t\t\tdescription: 'The value to search for. This must be primitive data type (boolean, number, or string).'\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function FindValue\n\t * @returns {string}\n\t * @summary Locate a value stored within an object.\n\t * @param {object} Root\n\t * @param {*} Value\n\t * The value to search for. This must be primitive data type (boolean, number, or string).\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction FindValue( Root, Value )\r\n\t{\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\tValue = Liquicode.Schema.CoerceValue( Value, _Schema.Parameters.Value, true );\r\n\r\n\t\tlet result = Liquicode.Object.Traverse( Root,\r\n\t\t\tfunction ( info )\r\n\t\t\t{\r\n\t\t\t\tif ( info.value === Value ) { return info.path; }\r\n\t\t\t} );\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tFindValue: FindValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '114',\r\n\tmember_of: 'Object',\r\n\tname: 'GetValue',\r\n\ttype: 'function',\r\n\treturns: '*',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tPath: {\r\n\t\t\tname: 'Path',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function GetValue\n\t * @returns {*}\n\t * @param {object} Root\n\t * @param {string} Path\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction GetValue( Root, Path )\r\n\t{\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\tPath = Liquicode.Schema.CoerceValue( Path, _Schema.Parameters.Path, true );\r\n\r\n\t\tlet result = Liquicode.Object.Traverse( Root,\r\n\t\t\tfunction ( info )\r\n\t\t\t{\r\n\t\t\t\tif ( info.path === Path ) { return info.value; }\r\n\t\t\t} );\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tGetValue: GetValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '115',\r\n\tmember_of: 'Object',\r\n\tname: 'SetValue',\r\n\ttype: 'function',\r\n\treturns: '*',\r\n\tdescription: ``,\r\n\tParameters: {\r\n\t\tRoot: {\r\n\t\t\tname: 'Root',\r\n\t\t\ttype: 'object',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tPath: {\r\n\t\t\tname: 'Path',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function SetValue\n\t * @returns {*}\n\t * @param {object} Root\n\t * @param {string} Path\n\t * @param {*} Value\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction SetValue( Root, Path, Value )\r\n\t{\r\n\t\t// Root = Root || {};\r\n\t\tRoot = Liquicode.Schema.CoerceValue( Root, _Schema.Parameters.Root, true );\r\n\t\tPath = Liquicode.Schema.CoerceValue( Path, _Schema.Parameters.Path, true );\r\n\t\t// Value = Liquicode.Schema.CoerceValue( Value, _Schema.Parameters.Value, true );\r\n\r\n\t\tlet result = Liquicode.Object.Traverse( Root,\r\n\t\t\tfunction ( info )\r\n\t\t\t{\r\n\t\t\t\tif ( info.path === Path ) \r\n\t\t\t\t{\r\n\t\t\t\t\tinfo.parent[ info.name ] = Value;\r\n\t\t\t\t\treturn Value;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tSetValue: SetValue,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '120',\r\n\tmember_of: 'Object',\r\n\tname: 'FromJson',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: `\r\nParse a Json string and return an object value.\r\nThis is identical Javascript's \"JSON.parse()\" function.\r\n\r\nThere are some significant differences from Javascript's version.\r\nThe parser is a bit more relaxed and allows:\r\n- Identifiers are not required to have quotes.\r\n- A comma can appear after the last element of an array or object.\r\n- String literals can use either single or double quotes.\r\n- Parsing automatically stops when the closing brace or bracket is found in the json string.\r\n\r\n`,\r\n\tParameters: {\r\n\t\tJsonString: {\r\n\t\t\tname: 'JsonString',\r\n\t\t\ttype: 'string',\r\n\t\t\t// required: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function FromJson\n\t * @returns {object}\n\t * @description\n\t * \nParse a Json string and return an object value.\nThis is identical Javascript's \"JSON.parse()\" function.\n\nThere are some significant differences from Javascript's version.\nThe parser is a bit more relaxed and allows:\n- Identifiers are not required to have quotes.\n- A comma can appear after the last element of an array or object.\n- String literals can use either single or double quotes.\n- Parsing automatically stops when the closing brace or bracket is found in the json string.\n\n\n\t * @param {string} [JsonString]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction FromJson( JsonString )\r\n\t{\r\n\t\tJsonString = Liquicode.Schema.CoerceValue( JsonString, _Schema.Parameters.JsonString, true );\r\n\r\n\t\tlet tokens = Tokenize( JsonString );\r\n\t\treturn BuildObject( tokens );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction Tokenize( Json )\r\n\t{\r\n\t\tlet tokens = [];\r\n\r\n\t\t// Json = Json.replace( '\\t', ' ' );\r\n\t\t// Json = Json.replace( '\\n', ' ' );\r\n\t\t// while ( Json.includes( '  ' ) ) { Json = Json.replace( '  ', ' ' ); }\r\n\r\n\t\tlet whitespace = ' \\t\\n';\r\n\t\tlet delimiters = '[]{}:,';\r\n\t\tlet quotes = `'\"`;\r\n\r\n\t\tlet ichar = 0;\r\n\t\twhile ( ichar < Json.length )\r\n\t\t{\r\n\t\t\tlet ch = Json.charAt( ichar );\r\n\t\t\tif ( whitespace.includes( ch ) )\r\n\t\t\t{\r\n\t\t\t\tichar++;\r\n\t\t\t}\r\n\t\t\telse if ( delimiters.includes( ch ) )\r\n\t\t\t{\r\n\t\t\t\ttokens.push( {\r\n\t\t\t\t\ttoken: ch,\r\n\t\t\t\t\ttype: 'delimiter',\r\n\t\t\t\t\tat: ichar,\r\n\t\t\t\t} );\r\n\t\t\t\tichar++;\r\n\t\t\t}\r\n\t\t\telse if ( quotes.includes( ch ) )\r\n\t\t\t{\r\n\t\t\t\tlet iat = ichar;\r\n\t\t\t\tichar++;\r\n\t\t\t\tlet s = '';\r\n\t\t\t\twhile ( ichar < Json.length )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet ch2 = Json.charAt( ichar );\r\n\t\t\t\t\tif ( ch2 === ch )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tichar++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ch2 === '\\\\' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tichar++;\r\n\t\t\t\t\t\tif ( ichar < Json.length )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tch2 = Json.charAt( ichar );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tch2 = '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ts += ch2;\r\n\t\t\t\t\tichar++;\r\n\t\t\t\t}\r\n\t\t\t\ttokens.push( {\r\n\t\t\t\t\ttoken: s,\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tat: iat,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet iat = ichar;\r\n\t\t\t\tichar++;\r\n\t\t\t\tlet s = ch;\r\n\t\t\t\twhile ( ichar < Json.length )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet ch2 = Json.charAt( ichar );\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\twhitespace.includes( ch2 )\r\n\t\t\t\t\t\t|| delimiters.includes( ch2 )\r\n\t\t\t\t\t\t|| quotes.includes( ch2 )\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ts += ch2;\r\n\t\t\t\t\tichar++;\r\n\t\t\t\t}\r\n\t\t\t\ttokens.push( {\r\n\t\t\t\t\ttoken: s,\r\n\t\t\t\t\ttype: 'literal',\r\n\t\t\t\t\tat: iat,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn tokens;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction BuildObject( Tokens )\r\n\t{\r\n\t\twhile ( Tokens.length )\r\n\t\t{\r\n\t\t\tif ( Tokens[ 0 ].token === '[' )\r\n\t\t\t{\r\n\t\t\t\tTokens.shift();\r\n\t\t\t\tlet value = [];\r\n\t\t\t\twhile ( Tokens[ 0 ].token !== ']' )\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue.push( BuildObject( Tokens ) );\r\n\t\t\t\t}\r\n\t\t\t\tTokens.shift();\r\n\t\t\t\tconsume_comma( Tokens );\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\telse if ( Tokens[ 0 ].token === '{' )\r\n\t\t\t{\r\n\t\t\t\tTokens.shift();\r\n\t\t\t\tlet value = {};\r\n\t\t\t\twhile ( Tokens[ 0 ].token !== '}' )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet key = Tokens.shift();\r\n\t\t\t\t\tlet colon = Tokens.shift();\r\n\t\t\t\t\tif ( ( key.type !== 'literal' ) && ( key.type !== 'string' ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrow new Error( `At position [${key.at}]: Expected literal, found ${key.type} '${key.token}' instead.`, key );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( colon.token !== ':' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrow new Error( `At position [${colon.at}]: Expected ':', found '${colon.token}' instead.`, colon );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalue[ key.token ] = BuildObject( Tokens );\r\n\t\t\t\t}\r\n\t\t\t\tTokens.shift();\r\n\t\t\t\tconsume_comma( Tokens );\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet value = Tokens[ 0 ].token;\r\n\t\t\t\tif ( Tokens[ 0 ].type === 'literal' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( value.toLowerCase() === 'null' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( value.toLowerCase() === 'true' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( value.toLowerCase() === 'false' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( !isNaN( parseFloat( value ) ) && isFinite( value ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = parseFloat( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTokens.shift();\r\n\t\t\t\tconsume_comma( Tokens );\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction consume_comma( Tokens )\r\n\t{\r\n\t\tif ( !Tokens.length ) { return; }\r\n\t\tif ( Tokens[ 0 ].token === ',' ) \r\n\t\t{\r\n\t\t\tTokens.shift();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tFromJson: FromJson,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '121',\r\n\tmember_of: 'Object',\r\n\tname: 'ToJsonOptions',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: `\r\n`,\r\n\tParameters: {\r\n\t\tPresetName: {\r\n\t\t\tname: 'PresetName',\r\n\t\t\ttype: 'string',\r\n\t\t\t// required: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ToJsonOptions\n\t * @returns {object}\n\t * @description\n\t * \n\n\t * @param {string} [PresetName]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ToJsonOptions( PresetName )\r\n\t{\r\n\t\tPresetName = Liquicode.Schema.CoerceValue( PresetName, _Schema.Parameters.PresetName, true );\r\n\r\n\t\tlet options = {\r\n\t\t\tidentifier_quote: `\"`,\r\n\t\t\tliteral_quote: `\"`,\r\n\t\t\talways_quote_identifiers: true,\t// Implemented?\r\n\t\t\teol_char: '',\r\n\t\t\ttab_char: '',\r\n\t\t\tspace_char: '',\r\n\t\t\tliberal_commas: false,\r\n\t\t\talign_values: false,\r\n\t\t\t//TODO: The following options have not been implemented:\r\n\t\t\t// extroverted_arrays: true,\r\n\t\t\t// extroverted_brackets: true,\r\n\t\t\t// extroverted_braces: true,\r\n\t\t};\r\n\t\tif ( !PresetName || PresetName === 'default' )\r\n\t\t{\r\n\t\t\t/* Do Nothing */\r\n\t\t}\r\n\t\telse if ( PresetName === 'pretty' )\r\n\t\t{\r\n\t\t\toptions.identifier_quote = `\"`;\r\n\t\t\toptions.literal_quote = `\"`;\r\n\t\t\toptions.always_quote_identifiers = true;\r\n\t\t\toptions.eol_char = '\\n';\r\n\t\t\toptions.tab_char = '    ';\r\n\t\t\toptions.space_char = ' ';\r\n\t\t}\r\n\t\telse if ( PresetName === 'pretty-2' )\r\n\t\t{\r\n\t\t\toptions.identifier_quote = `'`;\r\n\t\t\toptions.literal_quote = `\"`;\r\n\t\t\toptions.always_quote_identifiers = false;\r\n\t\t\toptions.eol_char = '\\n';\r\n\t\t\toptions.tab_char = '    ';\r\n\t\t\toptions.space_char = ' ';\r\n\t\t\toptions.liberal_commas = true;\r\n\t\t\toptions.align_values = true;\r\n\t\t\t// options.extroverted_arrays = true;\r\n\t\t\t// options.extroverted_brackets = true;\r\n\t\t\t// options.extroverted_braces = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new Error( `The parameter [PresetName] has an invalid value of [${PresetName}]. Must be one of: 'default', 'pretty', or 'pretty-2'.` );\r\n\t\t}\r\n\t\treturn options;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tToJsonOptions: ToJsonOptions,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '122',\r\n\tmember_of: 'Object',\r\n\tname: 'ToJson',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: `\r\n`,\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: '*',\r\n\t\t\tdescription: `The value to convert to a json string.`,\r\n\t\t},\r\n\t\tJsonOptions: {\r\n\t\t\tname: 'JsonOptions',\r\n\t\t\ttype: 'object|string',\r\n\t\t\tdescription: `Can be an options object or the name of an options preset (\"default\", \"pretty\", or \"pretty-2\")`,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ToJson\n\t * @returns {object}\n\t * @description\n\t * \n\n\t * @param {*} [Value]\n\t * The value to convert to a json string.\n\t * @param {object|string} [JsonOptions]\n\t * Can be an options object or the name of an options preset (\"default\", \"pretty\", or \"pretty-2\")\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ToJson( Value, JsonOptions )\r\n\t{\r\n\t\tlet options = Liquicode.Object.ToJsonOptions();\r\n\t\tif ( typeof JsonOptions === 'string' )\r\n\t\t{\r\n\t\t\toptions = Liquicode.Object.ToJsonOptions( JsonOptions );\r\n\t\t}\r\n\t\telse if ( ( typeof JsonOptions === 'object' ) && Object.keys( JsonOptions ).length )\r\n\t\t{\r\n\t\t\toptions = Liquicode.Object.Merge( options, JsonOptions );\r\n\t\t}\r\n\r\n\t\treturn stringify_recurse( Value, 0, options );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction stringify_recurse( Node, Depth, Options, Context = null )\r\n\t{\r\n\t\tlet text = '';\r\n\r\n\t\tif ( typeof Node === 'undefined' )\r\n\t\t{\r\n\t\t\t// return '';\r\n\t\t}\r\n\t\telse if ( typeof Node === 'boolean' )\r\n\t\t{\r\n\t\t\ttext += Node.toString();\r\n\t\t}\r\n\t\telse if ( typeof Node === 'number' )\r\n\t\t{\r\n\t\t\ttext += Node.toString();\r\n\t\t}\r\n\t\telse if ( typeof Node === 'bigint' )\r\n\t\t{\r\n\t\t\ttext += Node.toString();\r\n\t\t}\r\n\t\telse if ( typeof Node === 'string' )\r\n\t\t{\r\n\t\t\tlet value = Node.toString();\r\n\t\t\tif ( Options.literal_quote )\r\n\t\t\t{\r\n\t\t\t\tvalue = value.replace( Options.literal_quote, '\\\\' + Options.literal_quote );\r\n\t\t\t}\r\n\t\t\ttext += `${Options.literal_quote}${value}${Options.literal_quote}`;\r\n\t\t}\r\n\t\telse if ( typeof Node === 'symbol' )\r\n\t\t{\r\n\t\t\t// return '';\r\n\t\t}\r\n\t\telse if ( typeof Node === 'function' )\r\n\t\t{\r\n\t\t\t// return '';\r\n\t\t}\r\n\t\telse if ( typeof Node === 'object' )\r\n\t\t{\r\n\t\t\tif ( Node === null )\r\n\t\t\t{\r\n\t\t\t\ttext += 'null';\r\n\t\t\t}\r\n\t\t\telse if ( Array.isArray( Node ) )\r\n\t\t\t{\r\n\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\ttext += Options.tab_char.repeat( Depth );\r\n\t\t\t\ttext += '[' + Options.space_char;\r\n\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\tfor ( let index = 0; index < Node.length; index++ )\r\n\t\t\t\t{\r\n\t\t\t\t\ttext += Options.tab_char.repeat( Depth + 1 );\r\n\t\t\t\t\ttext += stringify_recurse( Node[ index ], Depth + 1, Options, 'array-element' );\r\n\t\t\t\t\tif ( ( index < ( Node.length - 1 ) ) || Options.liberal_commas )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext += ',' + Options.space_char;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\t}\r\n\t\t\t\ttext += Options.tab_char.repeat( Depth );\r\n\t\t\t\tif ( !Options.eol_char ) { text += Options.space_char; }\r\n\t\t\t\ttext += ']';\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif ( Context === 'field-value' )\r\n\t\t\t\t{\r\n\t\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\t\ttext += Options.tab_char.repeat( Depth );\r\n\t\t\t\t}\r\n\t\t\t\ttext += '{' + Options.space_char;\r\n\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\tlet keys = Object.keys( Node );\r\n\t\t\t\tlet max_key_length = 0;\r\n\t\t\t\tkeys.map( ( key ) => { if ( key.length > max_key_length ) { max_key_length = key.length; } } );\r\n\t\t\t\tfor ( let index = 0; index < keys.length; index++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet key = keys[ index ];\r\n\t\t\t\t\ttext += Options.tab_char.repeat( Depth + 1 );\r\n\t\t\t\t\t//TODO: Implement: Options.always_quote_identifiers = false\r\n\t\t\t\t\ttext += `${Options.identifier_quote}${key}${Options.identifier_quote}`;\r\n\t\t\t\t\ttext += ':';\r\n\t\t\t\t\tif ( Options.align_values )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext += ' '.repeat( max_key_length - key.length );\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttext += Options.space_char;\r\n\t\t\t\t\ttext += stringify_recurse( Node[ key ], Depth + 1, Options, 'field-value' );\r\n\t\t\t\t\tif ( ( index < ( keys.length - 1 ) ) || Options.liberal_commas )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext += ',' + Options.space_char;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttext += Options.eol_char;\r\n\t\t\t\t}\r\n\t\t\t\ttext += Options.tab_char.repeat( Depth );\r\n\t\t\t\tif ( !Options.eol_char ) { text += Options.space_char; }\r\n\t\t\t\ttext += '}';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn text;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tToJson: ToJson,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '125',\r\n\tmember_of: 'Object',\r\n\tname: 'FromIni',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: `\r\nParse an Ini string and return an object value.\r\n\r\n`,\r\n\tParameters: {\r\n\t\tIniString: {\r\n\t\t\tname: 'IniString',\r\n\t\t\ttype: 'string',\r\n\t\t\t// required: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function FromIni\n\t * @returns {object}\n\t * @description\n\t * \nParse an Ini string and return an object value.\n\n\n\t * @param {string} [IniString]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction FromIni( IniString )\r\n\t{\r\n\t\tIniString = Liquicode.Schema.CoerceValue( IniString, _Schema.Parameters.IniString, true );\r\n\r\n\t\t//NOTE: This function has the following side effects:\r\n\t\t//\t\t- ignores all lines before the first section is found\r\n\t\t//\t\t- ignores all entry lines which do not contain an '=' character\r\n\t\t//\t\t- All entry values are stored as strings and no conversion is attempted\r\n\t\tlet object_value = {};\r\n\t\tlet lines = IniString.split( '\\n' );\r\n\t\tlet section_name = '';\r\n\t\tfor ( let line_index = 0; line_index < lines.length; line_index++ )\r\n\t\t{\r\n\t\t\tlet line = lines[ line_index ];\r\n\t\t\tif ( !line ) { continue; }\r\n\t\t\tline = line.trim();\r\n\t\t\tif ( line.startsWith( '[' ) )\r\n\t\t\t{\r\n\t\t\t\t// New Section\r\n\t\t\t\tlet ich = line.indexOf( ']' );\r\n\t\t\t\tif ( ich < 0 ) { ich = line.length; }\r\n\t\t\t\tsection_name = line.substring( 1, ich );\r\n\t\t\t\tsection_name = section_name.trim();\r\n\t\t\t\tobject_value[ section_name ] = {};\r\n\t\t\t}\r\n\t\t\telse if ( section_name )\r\n\t\t\t{\r\n\t\t\t\t// New Entry\r\n\t\t\t\tlet ich = line.indexOf( '=' );\r\n\t\t\t\tif ( ich < 0 ) { continue; }\r\n\t\t\t\tlet entry_name = line.substring( 0, ich );\r\n\t\t\t\tentry_name = entry_name.trim();\r\n\t\t\t\tlet entry_value = line.substring( ich + 1 );\r\n\t\t\t\tentry_value = entry_value.trim();\r\n\t\t\t\tobject_value[ section_name ][ entry_name ] = entry_value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn object_value;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tFromIni: FromIni,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '126',\r\n\tmember_of: 'Object',\r\n\tname: 'ToIni',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: `\r\nParse an Ini string and return an object value.\r\n\r\n`,\r\n\tParameters: {\r\n\t\tValue: {\r\n\t\t\tname: 'Value',\r\n\t\t\ttype: 'object',\r\n\t\t\t// required: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ToIni\n\t * @returns {object}\n\t * @description\n\t * \nParse an Ini string and return an object value.\n\n\n\t * @param {object} [Value]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ToIni( Value )\r\n\t{\r\n\t\t// IniString = Liquicode.Schema.CoerceValue( IniString, _Schema.Parameters.IniString, true );\r\n\r\n\t\t//NOTE: This function has the following side effects:\r\n\t\t//\t\t- ignores all sections that are not of type object\r\n\t\t//\t\t- ignores all entry values that are not of a primitive type\r\n\t\tlet ini_text = '';\r\n\t\tlet section_keys = Object.keys( Value );\r\n\t\tfor ( let section_index = 0; section_index < section_keys.length; section_index++ )\r\n\t\t{\r\n\t\t\tlet section_key = section_keys[ section_index ];\r\n\t\t\tlet section_data = Value[ section_key ];\r\n\t\t\tif ( !( typeof section_data === 'object' ) ) { continue; }\r\n\t\t\tif ( Array.isArray( section_data ) ) { continue; }\r\n\t\t\tini_text += `[${section_key}]\\n`;\r\n\t\t\tlet entry_keys = Object.keys( section_data );\r\n\t\t\tfor ( let entry_index = 0; entry_index < entry_keys.length; entry_index++ )\r\n\t\t\t{\r\n\t\t\t\tlet entry_key = entry_keys[ entry_index ];\r\n\t\t\t\tlet entry_value = section_data[ entry_key ];\r\n\t\t\t\tif (\r\n\t\t\t\t\t( typeof entry_value === 'symbol' )\r\n\t\t\t\t\t|| ( typeof entry_value === 'function' )\r\n\t\t\t\t\t|| ( typeof entry_value === 'object' )\r\n\t\t\t\t)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tini_text += `${entry_key}=${entry_value}\\n`;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ini_text;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tToIni: ToIni,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '200',\r\n\tname: 'Text',\r\n\ttype: 'namespace',\r\n\tsummary: 'Functions for text parsing and manipulation.',\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\n * @public\n * @namespace Text\n * @summary Functions for text parsing and manipulation.\n*/\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\t// TextBuffer: require( './201-Text.TextBuffer.js' )( Liquicode ).TextBuffer,\r\n\t\tCompare: require( './202-Text.Compare.js' )( Liquicode ).Compare,\r\n\t\tMatches: require( './203-Text.Matches.js' )( Liquicode ).Matches,\r\n\t\tReplaceCharacters: require( './210-Text.ReplaceCharacters.js' )( Liquicode ).ReplaceCharacters,\r\n\t\tFirstWord: require( './220-Text.FirstWord.js' )( Liquicode ).FirstWord,\r\n\t\tAfterFirstWord: require( './221-Text.AfterFirstWord.js' )( Liquicode ).AfterFirstWord,\r\n\t\tLastWord: require( './222-Text.LastWord.js' )( Liquicode ).LastWord,\r\n\t\tBeforeLastWord: require( './223-Text.BeforeLastWord.js' )( Liquicode ).BeforeLastWord,\r\n\t};\r\n};\r\n\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '201',\r\n\tmember_of: 'Text',\r\n\tname: 'Compare',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Compares two strings.',\r\n\t\t'Returns a `-1` if `StringA` is less than `StringB`.',\r\n\t\t'Returns a `1` if `StringA` is greater than than `StringB`.',\r\n\t\t'Returns a `0` if `StringA` and `StringB` are the same.',\r\n\t],\r\n\tParameters: {\r\n\t\tStringA: {\r\n\t\t\tname: 'StringA',\r\n\t\t\ttype: 'string',\r\n\t\t\t// required: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tStringB: {\r\n\t\t\tname: 'StringB',\r\n\t\t\ttype: 'string',\r\n\t\t\t// required: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tCaseSensitive: {\r\n\t\t\tname: 'CaseSensitive',\r\n\t\t\ttype: 'boolean',\r\n\t\t\t// required: true,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Compare\n\t * @returns {string}\n\t * @description\n\t * Compares two strings.\n\t * Returns a `-1` if `StringA` is less than `StringB`.\n\t * Returns a `1` if `StringA` is greater than than `StringB`.\n\t * Returns a `0` if `StringA` and `StringB` are the same.\n\t * @param {string} [StringA]\n\t * @param {string} [StringB]\n\t * @param {boolean} [CaseSensitive=true]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Compare( StringA, StringB, CaseSensitive )\r\n\t{\r\n\t\tStringA = Liquicode.Schema.ValidateValue( StringA, _Schema.Parameters.StringA , { coerce_values: true, throw_errors: true });\r\n\t\tStringB = Liquicode.Schema.ValidateValue( StringB, _Schema.Parameters.StringB , { coerce_values: true, throw_errors: true });\r\n\t\tCaseSensitive = Liquicode.Schema.ValidateValue( CaseSensitive, _Schema.Parameters.CaseSensitive, { coerce_values: true, throw_errors: true } );\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif ( typeof StringA !== 'string' ) { return -1; }\r\n\t\t\tif ( typeof StringB !== 'string' ) { return 1; }\r\n\t\t\tif ( !CaseSensitive )\r\n\t\t\t{\r\n\t\t\t\tStringA = StringA.toLowerCase();\r\n\t\t\t\tStringB = StringB.toLowerCase();\r\n\t\t\t}\r\n\t\t\treturn StringA.localeCompare( StringB );\r\n\t\t}\r\n\t\tcatch ( error ) \r\n\t\t{\r\n\t\t\tconsole.error( error.message, error );\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tCompare: Compare,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '203',\r\n\tmember_of: 'Text',\r\n\tname: 'Matches',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Matches the text against a wildcard-lik pattern.',\r\n\t\t'Returns true If the match succeeds, otherwise false.',\r\n\t],\r\n\tParameters: {\r\n\t\tText: {\r\n\t\t\tname: 'Text',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tPattern: {\r\n\t\t\tname: 'Pattern',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Matches\n\t * @returns {string}\n\t * @description\n\t * Matches the text against a wildcard-lik pattern.\n\t * Returns true If the match succeeds, otherwise false.\n\t * @param {string} Text\n\t * @param {string} Pattern\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Matches( Text, Pattern ) \r\n\t{\r\n\t\t// Validate Parameters\r\n\t\tText = Liquicode.Schema.ValidateValue( Text, _Schema.Parameters.Text , { coerce_values: true, throw_errors: true });\r\n\t\tPattern = Liquicode.Schema.ValidateValue( Pattern, _Schema.Parameters.Pattern , { coerce_values: true, throw_errors: true });\r\n\r\n\t\t//FROM: https://stackoverflow.com/a/57527468\r\n\t\tlet wildcard_exp = Pattern.replace( /[.+^${}()|[\\]\\\\]/g, '\\\\$&' ); // regexp escape \r\n\t\tlet reg_exp = new RegExp( `^${wildcard_exp.replace( /\\*/g, '.*' ).replace( /\\?/g, '.' )}$`, 'i' );\r\n\t\treturn reg_exp.test( Text ); // remove last 'i' above to have case sensitive\r\n\t}\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tMatches: Matches,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '210',\r\n\tmember_of: 'Text',\r\n\tname: 'ReplaceCharacters',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Replaces characters within a string.',\r\n\t\t'Returns the modified string.',\r\n\t],\r\n\tParameters: {\r\n\t\tText: {\r\n\t\t\tname: 'Text',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tSearchCharacters: {\r\n\t\t\tname: 'SearchCharacters',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tReplacementText: {\r\n\t\t\tname: 'ReplacementText',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tMaxTimes: {\r\n\t\t\tname: 'MaxTimes',\r\n\t\t\ttype: 'number',\r\n\t\t\tformat: 'integer',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: -1,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ReplaceCharacters\n\t * @returns {string}\n\t * @description\n\t * Replaces characters within a string.\n\t * Returns the modified string.\n\t * @param {string} Text\n\t * @param {string} SearchCharacters\n\t * @param {string} ReplacementText\n\t * @param {number} [MaxTimes=-1]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ReplaceCharacters( Text, SearchCharacters, ReplacementText, MaxTimes )\r\n\t{\r\n\t\t// Validate Parameters\r\n\t\tText = Liquicode.Schema.ValidateValue( Text, _Schema.Parameters.Text , { coerce_values: true, throw_errors: true });\r\n\t\tSearchCharacters = Liquicode.Schema.ValidateValue( SearchCharacters, _Schema.Parameters.SearchCharacters, { coerce_values: true, throw_errors: true } );\r\n\t\tReplacementText = Liquicode.Schema.ValidateValue( ReplacementText, _Schema.Parameters.ReplacementText , { coerce_values: true, throw_errors: true });\r\n\t\tMaxTimes = Liquicode.Schema.ValidateValue( MaxTimes, _Schema.Parameters.MaxTimes , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tlet new_text = '';\r\n\t\tlet count = 0;\r\n\t\tfor ( let index = 0; index < Text.length; index++ )\r\n\t\t{\r\n\t\t\tif ( ( MaxTimes > 0 ) && ( count >= MaxTimes ) ) \r\n\t\t\t{\r\n\t\t\t\tnew_text += Text.slice( index );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tlet char = Text[ index ];\r\n\t\t\tif ( SearchCharacters.indexOf( char ) >= 0 )\r\n\t\t\t{\r\n\t\t\t\tchar = ReplacementText;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tnew_text += char;\r\n\t\t}\r\n\t\treturn new_text;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tReplaceCharacters: ReplaceCharacters,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '220',\r\n\tmember_of: 'Text',\r\n\tname: 'FirstWord',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns the first word of a text phrase.',\r\n\t],\r\n\tParameters: {\r\n\t\tPhrase: {\r\n\t\t\tname: 'Phrase',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: 'A text phrase containing words separated by delimiters.',\r\n\t\t},\r\n\t\tDelimiters: {\r\n\t\t\tname: 'Delimiters',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: ' ',\r\n\t\t\tdescription: 'A string of whitespace and punctuation characters that break the phrase into words.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function FirstWord\n\t * @returns {string}\n\t * @description\n\t * Returns the first word of a text phrase.\n\t * @param {string} [Phrase]\n\t * A text phrase containing words separated by delimiters.\n\t * @param {string} [Delimiters=\" \"]\n\t * A string of whitespace and punctuation characters that break the phrase into words.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction FirstWord( Phrase, Delimiters )\r\n\t{\r\n\t\tPhrase = Liquicode.Schema.ValidateValue( Phrase, _Schema.Parameters.Phrase , { coerce_values: true, throw_errors: true });\r\n\t\tDelimiters = Liquicode.Schema.ValidateValue( Delimiters, _Schema.Parameters.Delimiters, { coerce_values: true, throw_errors: true } );\r\n\r\n\t\tlet word_start = -1;\r\n\t\tfor ( let index = 0; index < Phrase.length; index++ )\r\n\t\t{\r\n\t\t\tlet ch = Phrase.substr( index, 1 );\r\n\t\t\tif ( Delimiters.indexOf( ch ) >= 0 )\r\n\t\t\t{\r\n\t\t\t\tif ( word_start >= 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Phrase.substr( word_start, ( index - word_start ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif ( word_start < 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tword_start = index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( word_start < 0 ) { return ''; }\r\n\t\treturn Phrase.substr( word_start );\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tFirstWord: FirstWord,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '221',\r\n\tmember_of: 'Text',\r\n\tname: 'AfterFirstWord',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns the remainder of a text phrase occurring after the first word.',\r\n\t],\r\n\tParameters: {\r\n\t\tPhrase: {\r\n\t\t\tname: 'Phrase',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: 'A text phrase containing words separated by delimiters.',\r\n\t\t},\r\n\t\tDelimiters: {\r\n\t\t\tname: 'Delimiters',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: ' ',\r\n\t\t\tdescription: 'A string of characters that break the phrase into words.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function AfterFirstWord\n\t * @returns {string}\n\t * @description\n\t * Returns the remainder of a text phrase occurring after the first word.\n\t * @param {string} [Phrase]\n\t * A text phrase containing words separated by delimiters.\n\t * @param {string} [Delimiters=\" \"]\n\t * A string of characters that break the phrase into words.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction AfterFirstWord( Phrase, Delimiters )\r\n\t{\r\n\t\tPhrase = Liquicode.Schema.ValidateValue( Phrase, _Schema.Parameters.Phrase , { coerce_values: true, throw_errors: true });\r\n\t\tDelimiters = Liquicode.Schema.ValidateValue( Delimiters, _Schema.Parameters.Delimiters , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tfor ( let index = 0; index < Phrase.length; index++ )\r\n\t\t{\r\n\t\t\tlet ch = Phrase.substr( index, 1 );\r\n\t\t\tif ( Delimiters.indexOf( ch ) >= 0 )\r\n\t\t\t{\r\n\t\t\t\twhile ( Delimiters.indexOf( ch ) >= 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\tif ( index >= Phrase.length ) { break; }\r\n\t\t\t\t\tch = Phrase.substr( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t\treturn Phrase.substr( index );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tAfterFirstWord: AfterFirstWord,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '222',\r\n\tmember_of: 'Text',\r\n\tname: 'LastWord',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns the last word of a text phrase.',\r\n\t],\r\n\tParameters: {\r\n\t\tPhrase: {\r\n\t\t\tname: 'Phrase',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: 'A text phrase containing words separated by delimiters.',\r\n\t\t},\r\n\t\tDelimiters: {\r\n\t\t\tname: 'Delimiters',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: ' ',\r\n\t\t\tdescription: 'A string of characters that break the phrase into words.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function LastWord\n\t * @returns {string}\n\t * @description\n\t * Returns the last word of a text phrase.\n\t * @param {string} [Phrase]\n\t * A text phrase containing words separated by delimiters.\n\t * @param {string} [Delimiters=\" \"]\n\t * A string of characters that break the phrase into words.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction LastWord( Phrase, Delimiters )\r\n\t{\r\n\t\tPhrase = Liquicode.Schema.ValidateValue( Phrase, _Schema.Parameters.Phrase , { coerce_values: true, throw_errors: true });\r\n\t\tDelimiters = Liquicode.Schema.ValidateValue( Delimiters, _Schema.Parameters.Delimiters, { coerce_values: true, throw_errors: true } );\r\n\r\n\t\tlet word_end = -1;\r\n\t\tfor ( let index = Phrase.length - 1; index >= 0; index-- )\r\n\t\t{\r\n\t\t\tlet ch = Phrase.substr( index, 1 );\r\n\t\t\tif ( Delimiters.indexOf( ch ) >= 0 )\r\n\t\t\t{\r\n\t\t\t\tif ( word_end > 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Phrase.substr( index + 1, ( word_end - index ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif ( word_end < 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tword_end = index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( word_end < 0 ) { return ''; }\r\n\t\treturn Phrase.substr( 0, ( word_end - index ) );\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tLastWord: LastWord,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '223',\r\n\tmember_of: 'Text',\r\n\tname: 'BeforeLastWord',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns the remainder of a text phrase occurring befiore the last word.',\r\n\t],\r\n\tParameters: {\r\n\t\tPhrase: {\r\n\t\t\tname: 'Phrase',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: 'A text phrase containing words separated by delimiters.',\r\n\t\t},\r\n\t\tDelimiters: {\r\n\t\t\tname: 'Delimiters',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: ' ',\r\n\t\t\tdescription: 'A string of characters that break the phrase into words.',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function BeforeLastWord\n\t * @returns {string}\n\t * @description\n\t * Returns the remainder of a text phrase occurring befiore the last word.\n\t * @param {string} [Phrase]\n\t * A text phrase containing words separated by delimiters.\n\t * @param {string} [Delimiters=\" \"]\n\t * A string of characters that break the phrase into words.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction BeforeLastWord( Phrase, Delimiters )\r\n\t{\r\n\t\tPhrase = Liquicode.Schema.ValidateValue( Phrase, _Schema.Parameters.Phrase , { coerce_values: true, throw_errors: true });\r\n\t\tDelimiters = Liquicode.Schema.ValidateValue( Delimiters, _Schema.Parameters.Delimiters , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tfor ( let index = Phrase.length - 1; index >= 0; index-- )\r\n\t\t{\r\n\t\t\tlet ch = Phrase.substr( index, 1 );\r\n\t\t\tif ( Delimiters.indexOf( ch ) >= 0 )\r\n\t\t\t{\r\n\t\t\t\treturn Phrase.substr( 0, index );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tBeforeLastWord: BeforeLastWord,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '400',\r\n\tname: 'Date',\r\n\ttype: 'namespace',\r\n\tsummary: 'Functions for manipulating dates.',\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\n * @public\n * @namespace Date\n * @summary Functions for manipulating dates.\n*/\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tParse: require( './401-Date.Parse.js' )( Liquicode ).Parse,\r\n\t\tZuluTimestamp: require( './410-Date.ZuluTimestamp.js' )( Liquicode ).ZuluTimestamp,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '401',\r\n\tmember_of: 'Date',\r\n\tname: 'Parse',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: [\r\n\t\t'Converts a string to a date-time value.',\r\n\t\t'Returns a `date_time_parts` structure.'\r\n\t],\r\n\tParameters: {\r\n\t\tText: {\r\n\t\t\tname: 'Text',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tTimeZoneOffset: {\r\n\t\t\tname: 'TimeZoneOffset',\r\n\t\t\ttype: 'function',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '+0000',\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Parse\n\t * @returns {object}\n\t * @description\n\t * Converts a string to a date-time value.\n\t * Returns a `date_time_parts` structure.\n\t * @param {string} Text\n\t * @param {function} [TimeZoneOffset=\"+0000\"]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction Parse( Text, TimeZoneOffset )\r\n\t{\r\n\t\tFrom = Liquicode.Schema.ValidateValue( From, _Schema.Parameters.From , { coerce_values: true, throw_errors: true });\r\n\r\n\t\t// Prepare and validate the date string.\r\n\t\tText = Text.toLowerCase().trim();\r\n\t\tif ( !Text ) { return get_date_parts( null, TimeZoneOffset ); }\r\n\r\n\t\t// Validate AssumeTimeZone\r\n\t\tif ( !TimeZoneOffset ) { TimeZoneOffset = '+0000'; }\r\n\t\tif ( !TimeZoneOffset.startsWith( '+' ) && !TimeZoneOffset.startsWith( '-' ) )\r\n\t\t{\r\n\t\t\tthrow new Error( `AssumeTimeZone must begin with a plus or minus sign.` );\r\n\t\t}\r\n\t\tlet offset = TimeZoneOffset.substr( 1 );\r\n\t\tif ( ( offset.length !== 4 ) || isNaN( offset ) )\r\n\t\t{\r\n\t\t\tthrow new Error( `AssumeTimeZone must have a four digit offset component.` );\r\n\t\t}\r\n\r\n\t\tlet date = null;\r\n\r\n\t\t// Try some unusual cases of compressed timestamps.\r\n\t\tif ( !isNaN( Number( Text ) ) )\r\n\t\t{\r\n\t\t\tlet s = Number( Text ).toString(); // Remove any noise.\r\n\t\t\tif ( s.length == 8 )\r\n\t\t\t{\r\n\t\t\t\t// 20180329 => 2018-03-29\r\n\t\t\t\ts = (\r\n\t\t\t\t\ts.substr( 0, 4 ) + '-' +\r\n\t\t\t\t\ts.substr( 4, 2 ) + '-' +\r\n\t\t\t\t\ts.substr( 6, 2 ) +\r\n\t\t\t\t\t' 00:00:00 ' + TimeZoneOffset\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse if ( s.length == 10 )\r\n\t\t\t{\r\n\t\t\t\t// 1465241631 => 1465241631000 => Date(1465241631000)\r\n\t\t\t\ts += '000'; // milliseconds\r\n\t\t\t\ts = Number( s );\r\n\t\t\t}\r\n\t\t\telse if ( s.length == 13 )\r\n\t\t\t{\r\n\t\t\t\t// 1465241631000 => Date(1465241631000)\r\n\t\t\t\ts = s; // milliseconds\r\n\t\t\t\ts = Number( s );\r\n\t\t\t}\r\n\t\t\telse if ( s.length == 14 )\r\n\t\t\t{\r\n\t\t\t\t// 20180329074753 => 2018-03-29 07:47:53\r\n\t\t\t\ts = (\r\n\t\t\t\t\ts.substr( 0, 4 ) + '-' +\r\n\t\t\t\t\ts.substr( 4, 2 ) + '-' +\r\n\t\t\t\t\ts.substr( 6, 2 ) + ' ' +\r\n\t\t\t\t\ts.substr( 8, 2 ) + ':' +\r\n\t\t\t\t\ts.substr( 10, 2 ) + ':' +\r\n\t\t\t\t\ts.substr( 12, 2 ) +\r\n\t\t\t\t\t' ' + TimeZoneOffset\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Try the javascript date parsing.\r\n\t\t\ttry { date = new Date( s ); }\r\n\t\t\tcatch ( e ) { }\r\n\t\t\tif ( date ) { return get_date_parts( date, TimeZoneOffset ); }\r\n\t\t}\r\n\r\n\t\t// Test for ISO format: 2005-05-01T15:05:23.000Z\r\n\t\tif (\r\n\t\t\t( Text.length >= 24 )\r\n\t\t\t&& ( Text.substr( 4, 1 ) === '-' )\r\n\t\t\t&& ( Text.substr( 7, 1 ) === '-' )\r\n\t\t\t&& ( Text.substr( 10, 1 ) === 't' )\r\n\t\t\t&& ( Text.substr( 13, 1 ) === ':' )\r\n\t\t\t&& ( Text.substr( 16, 1 ) === ':' )\r\n\t\t\t&& ( Text.substr( 19, 1 ) === '.' )\r\n\t\t\t&& ( Text.substr( 23, 1 ) === 'z' )\r\n\t\t)\r\n\t\t{\r\n\t\t\ttry { date = new Date( Text ); }\r\n\t\t\tcatch ( e ) { }\r\n\t\t\tif ( date && !isNaN( date.getTime() ) )\r\n\t\t\t{ return get_date_parts( date, TimeZoneOffset ); }\r\n\t\t\telse { return get_date_parts( null, TimeZoneOffset ); }\r\n\t\t}\r\n\r\n\t\t// Test for ISO format (short): 2005-05-01T15:05:23Z\r\n\t\tif (\r\n\t\t\t( Text.length >= 20 )\r\n\t\t\t&& ( Text.substr( 4, 1 ) === '-' )\r\n\t\t\t&& ( Text.substr( 7, 1 ) === '-' )\r\n\t\t\t&& ( Text.substr( 10, 1 ) === 't' )\r\n\t\t\t&& ( Text.substr( 13, 1 ) === ':' )\r\n\t\t\t&& ( Text.substr( 16, 1 ) === ':' )\r\n\t\t\t&& ( Text.substr( 19, 1 ) === 'z' )\r\n\t\t)\r\n\t\t{\r\n\t\t\ttry { date = new Date( Text ); }\r\n\t\t\tcatch ( e ) { }\r\n\t\t\tif ( date && !isNaN( date.getTime() ) )\r\n\t\t\t{ return get_date_parts( date, TimeZoneOffset ); }\r\n\t\t\telse { return get_date_parts( null, TimeZoneOffset ); }\r\n\t\t}\r\n\r\n\t\t// We know its not a javascript supported format.\r\n\t\t// We have to do it the hard way.\r\n\t\tlet tokens = tokenize_date( Text );\r\n\t\tlet symbols = tokens2symbols( tokens );\r\n\t\tdate = symbols2date( symbols, TimeZoneOffset );\r\n\r\n\t\t// Return the date.\r\n\t\tif ( date && !isNaN( date.getTime() ) )\r\n\t\t{ return get_date_parts( date, TimeZoneOffset ); }\r\n\t\telse { return get_date_parts( null, TimeZoneOffset ); }\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tconst REFS =\r\n\t{\r\n\t\tday_of_week: [ 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday' ],\r\n\t\tday_of_week_abbrev: [ 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun' ],\r\n\t\tmonths: [ 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december' ],\r\n\t\tmonths_abbrev: [ 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec' ],\r\n\t};\r\n\t\r\n\t\r\n\t//---------------------------------------------------------------------\r\n\tfunction tokenize_date( text )\r\n\t{\r\n\t\tlet tokens = [];\r\n\t\r\n\t\t// Split text into words.\r\n\t\tlet words = text.split( ' ' );\r\n\t\r\n\t\t// Convert words to tokens.\r\n\t\twords.forEach(\r\n\t\t\t( word, word_index ) =>\r\n\t\t\t{\r\n\t\t\t\t// Remove punctuation\r\n\t\t\t\tif ( word.endsWith( ',' ) ) { word = word.substr( 0, word.length - 1 ); }\r\n\t\t\t\tif ( word.endsWith( '.' ) ) { word = word.substr( 0, word.length - 1 ); }\r\n\t\r\n\t\t\t\t// Split up date formats\r\n\t\t\t\tif ( word.includes( '/' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet parts = word.split( '/' );\r\n\t\t\t\t\tparts.forEach( part => tokens.push( part ) );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( word.includes( '-' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( word.startsWith( '-' ) || word.startsWith( 'utc-' ) || word.startsWith( 'gmt-' ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Treat as a time zone offset\r\n\t\t\t\t\t\ttokens.push( word );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Treat as a date\r\n\t\t\t\t\t\tlet parts = word.split( '-' );\r\n\t\t\t\t\t\tparts.forEach( part => tokens.push( part ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( word.includes( ',' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet parts = word.split( ',' );\r\n\t\t\t\t\tparts.forEach( part => tokens.push( part ) );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttokens.push( word );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\r\n\t\t// Return tokens.\r\n\t\treturn tokens;\r\n\t}\r\n\t\r\n\t\r\n\t//---------------------------------------------------------------------\r\n\tfunction tokens2symbols( tokens )\r\n\t{\r\n\t\tlet symbols = [];\r\n\t\ttokens.forEach(\r\n\t\t\t( token, token_index ) =>\r\n\t\t\t{\r\n\t\r\n\t\t\t\t// Check for time zone.\r\n\t\t\t\tif ( token.startsWith( '+' ) || token.startsWith( 'utc+' ) || token.startsWith( 'gmt+' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tsymbols.push( { type: 'zone', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ( token.startsWith( '-' ) || token.startsWith( 'utc-' ) || token.startsWith( 'gmt-' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tsymbols.push( { type: 'zone', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Check for universal time format.\r\n\t\t\t\tif ( token.includes( ':' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tsymbols.push( { type: 'time', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Check for month names.\r\n\t\t\t\tif ( REFS.months.includes( token ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index = REFS.months.indexOf( token ) + 1;\r\n\t\t\t\t\ttoken = '' + index;\r\n\t\t\t\t\tif ( index < 10 ) { token = '0' + token; }\r\n\t\t\t\t\tsymbols.push( { type: 'month', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ( REFS.months_abbrev.includes( token ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index = REFS.months_abbrev.indexOf( token ) + 1;\r\n\t\t\t\t\ttoken = '' + index;\r\n\t\t\t\t\tif ( index < 10 ) { token = '0' + token; }\r\n\t\t\t\t\tsymbols.push( { type: 'month', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Check for numeric\r\n\t\t\t\tif ( !isNaN( Number( token ) ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( token.length <= 2 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( token.length === 1 ) { token = '0' + token; }\r\n\t\t\t\t\t\tsymbols.push( { type: 'day-or-month', value: token } );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( token.length === 4 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsymbols.push( { type: 'year', value: token } );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsymbols.push( { type: 'number', value: token } );\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tsymbols.push( { type: 'text', value: token } );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\t);\r\n\t\r\n\t\t// Return the symbols.\r\n\t\treturn symbols;\r\n\t}\r\n\t\r\n\t\r\n\t//---------------------------------------------------------------------\r\n\tfunction symbols2date( symbols, AssumeTimeZone )\r\n\t{\r\n\t\tlet fields =\r\n\t\t{\r\n\t\t\tyear: null,\r\n\t\t\tmonth: null,\r\n\t\t\tday: null,\r\n\t\t\ttime: null,\r\n\t\t\tzone: null,\r\n\t\t};\r\n\t\r\n\t\t// The first picks out the things we are pretty sure of.\r\n\t\tsymbols.forEach(\r\n\t\t\t( symbol ) =>\r\n\t\t\t{\r\n\t\t\t\tif ( symbol.type === 'year' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( fields.year ) { return; }\r\n\t\t\t\t\tfields.year = symbol.value;\r\n\t\t\t\t}\r\n\t\t\t\telse if ( symbol.type === 'month' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( fields.month ) { return; }\r\n\t\t\t\t\tfields.month = symbol.value;\r\n\t\t\t\t}\r\n\t\t\t\telse if ( symbol.type === 'time' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( fields.time ) { return; }\r\n\t\t\t\t\tfields.time = symbol.value;\r\n\t\t\t\t}\r\n\t\t\t\telse if ( symbol.type === 'zone' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( fields.zone ) { return; }\r\n\t\t\t\t\tfields.zone = symbol.value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\r\n\t\t// We go again to try to determine month and day.\r\n\t\tsymbols.forEach(\r\n\t\t\t( symbol ) =>\r\n\t\t\t{\r\n\t\t\t\tif ( symbol.type === 'day-or-month' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( fields.day && fields.month ) { return; }\r\n\t\t\t\t\tif ( fields.month )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfields.day = symbol.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfields.month = symbol.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\r\n\t\t// Validate our date fields.\r\n\t\tif ( !fields.year ) { return null; }\r\n\t\tif ( !fields.month ) { return null; }\r\n\t\tif ( !fields.day ) { return null; }\r\n\t\tif ( !fields.time ) { fields.time = '00:00:00'; }\r\n\t\tif ( !fields.zone ) { fields.zone = AssumeTimeZone; }\r\n\t\r\n\t\t// Try to fix timezone offsets.\r\n\t\tif ( fields.zone )\r\n\t\t{\r\n\t\t\tlet zone = fields.zone;\r\n\t\r\n\t\t\t// Find the offset and direction.\r\n\t\t\tlet offset = '';\r\n\t\t\tlet sign = '';\r\n\t\t\tlet sign_index = -1;\r\n\t\t\t// - sign\r\n\t\t\tif ( zone.includes( '-' ) )\r\n\t\t\t{\r\n\t\t\t\tsign = '-';\r\n\t\t\t\tsign_index = zone.indexOf( '-' );\r\n\t\t\t\toffset = zone.substr( sign_index + 1 );\r\n\t\t\t}\r\n\t\t\telse if ( zone.includes( '+' ) )\r\n\t\t\t{\r\n\t\t\t\tsign = '+';\r\n\t\t\t\tsign_index = zone.indexOf( '+' );\r\n\t\t\t\toffset = zone.substr( sign_index + 1 );\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsign = '+';\r\n\t\t\t\toffset = zone;\r\n\t\t\t}\r\n\t\t\t// - offset\r\n\t\t\tif ( offset.includes( ':' ) )\r\n\t\t\t{\r\n\t\t\t\toffset = offset.replace( ':', '' );\r\n\t\t\t}\r\n\t\t\tif ( offset.length > 4 ) { offset = offset.substr( 0, 4 ); } // e.g. +0500!@#\r\n\t\t\tif ( offset.length === 1 ) { offset = `0${offset}00`; } // e.g. -5\r\n\t\t\telse if ( offset.length === 2 ) { offset = `${offset}00`; } // e.g. -12\r\n\t\t\telse if ( offset.length === 3 ) { offset = `0${offset}`; } // e.g. -5:30\r\n\t\t\t// Reconstruct the zone.\r\n\t\t\tif ( offset.length === 4 )\r\n\t\t\t{\r\n\t\t\t\tfields.zone = `${sign}${offset}`;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfields.zone = AssumeTimeZone;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// Convert what we have with javascript date parsing.\r\n\t\tlet text = `${fields.year}-${fields.month}-${fields.day} ${fields.time} ${fields.zone}`;\r\n\t\tlet date = null;\r\n\t\ttry { date = new Date( text ); }\r\n\t\tcatch ( e ) { }\r\n\t\treturn date;\r\n\t}\r\n\t\r\n\t\r\n\t\t//---------------------------------------------------------------------\r\n\tfunction get_date_parts( JsDate, TimeZoneOffset = '+0000' )\r\n\t{\r\n\t\tlet datetime_parts =\r\n\t\t{\r\n\t\t\tdate: null,\r\n\t\t\tyear: 0,\r\n\t\t\tmonth_num: 0,\r\n\t\t\tmonth_name: '',\r\n\t\t\tday_of_month: 0,\r\n\t\t\tday_of_week: 0,\r\n\t\t\tday_name: '',\r\n\t\t\thours: 0,\r\n\t\t\tminutes: 0,\r\n\t\t\tseconds: 0,\r\n\t\t\tmilliseconds: 0,\r\n\t\t\ttimezone_offset: ''\r\n\t\t};\r\n\t\tif ( !JsDate ) { return datetime_parts; }\r\n\t\tif ( isNaN( JsDate.getTime() ) ) { return datetime_parts; }\r\n\r\n\t\tdatetime_parts.date = new Date( JsDate.getTime() );\r\n\t\tdatetime_parts.year = datetime_parts.date.getFullYear();\r\n\t\tdatetime_parts.month_num = datetime_parts.date.getMonth();\r\n\t\tdatetime_parts.month_name = REFS.months[ datetime_parts.month_num ];\r\n\t\tdatetime_parts.day_of_month = datetime_parts.date.getDate();\r\n\t\tdatetime_parts.day_of_week = datetime_parts.date.getDay();\r\n\t\tif ( datetime_parts.day_of_week === 0 ) { datetime_parts.day_of_week = 7; }\r\n\t\tdatetime_parts.day_name = REFS.day_of_week[ datetime_parts.day_of_week - 1 ];\r\n\t\tdatetime_parts.hours = datetime_parts.date.getHours();\r\n\t\tdatetime_parts.minutes = datetime_parts.date.getMinutes();\r\n\t\tdatetime_parts.seconds = datetime_parts.date.getSeconds();\r\n\t\tdatetime_parts.milliseconds = datetime_parts.date.getMilliseconds();\r\n\t\tdatetime_parts.timezone_offset = TimeZoneOffset;\r\n\r\n\t\treturn datetime_parts;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tParse: Parse,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '410',\r\n\tmember_of: 'Date',\r\n\tname: 'ZuluTimestamp',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: [\r\n\t\t'Returns the current date and time as a string.',\r\n\t],\r\n\tParameters: {},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function ZuluTimestamp\n\t * @returns {string}\n\t * @description\n\t * Returns the current date and time as a string.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction ZuluTimestamp()\r\n\t{\r\n\t\treturn ( new Date() ).toISOString();\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tZuluTimestamp: ZuluTimestamp,\r\n\t};\r\n};\r\n","\"use strict\";\n\n\n//---------------------------------------------------------------------\nlet Schema = {\n\tid: '500',\n\tname: 'Token',\n\ttype: 'namespace',\n\tsummary: 'Functions for tokenizing text strings.',\n};\n\n\n//-start-jsdoc---------------------------------------------------------\n/**\n * @public\n * @namespace Token\n * @summary Functions for tokenizing text strings.\n*/\n//-end-jsdoc-----------------------------------------------------------\n\n\n//---------------------------------------------------------------------\nmodule.exports = function ( Liquicode )\n{\n\treturn {\n\t\t_Schema: Schema,\n\t\tTokenizeOptions: require( './501-Token.TokenizeOptions.js' )( Liquicode ).TokenizeOptions,\n\t\tTokenize: require( './502-Token.Tokenize.js' )( Liquicode ).Tokenize,\n\t};\n};\n\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '501',\r\n\tmember_of: 'Token',\r\n\tname: 'TokenizeOptions',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: [\r\n\t\t'Returns a set of options for calling Tokenize().',\r\n\t\t'Throws an error if an invalid value for PresetName is given.',\r\n\t],\r\n\tParameters: {\r\n\t\tText: {\r\n\t\t\tname: 'PresetName',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: [\r\n\t\t\t\t`To retrieve an options preset, use one of: 'csv', or 'cli'`,\r\n\t\t\t\t`You can leave this empty or 'default' for the default options.`,\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function TokenizeOptions\n\t * @returns {object}\n\t * @description\n\t * Returns a set of options for calling Tokenize().\n\t * Throws an error if an invalid value for PresetName is given.\n\t * @param {string} [PresetName]\n\t * To retrieve an options preset, use one of: 'csv', or 'cli'\n\t * You can leave this empty or 'default' for the default options.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction TokenizeOptions( PresetName )\r\n\t{\r\n\t\tlet options = {\r\n\t\t\twhitespace: ` \\t\\r\\n`,\r\n\t\t\tsymbols: `.;,:<>+-*/^()[]{}=`,\r\n\t\t\tliteral_delimiters: `'\"`,\r\n\t\t\tliteral_escape_chars: `\\\\`,\r\n\t\t\tself_escape_literal_delimiters: false,\r\n\t\t\tkeywords: [],\r\n\t\t\tkeywords_are_case_sensitive: false,\r\n\t\t\tdiscard_whitespace: false,\r\n\t\t\tresolve_literal_values: false,\r\n\t\t\tresolve_numeric_values: false,\r\n\t\t};\r\n\t\tif ( !PresetName || PresetName === 'default' )\r\n\t\t{\r\n\t\t\t/* Do Nothing */\r\n\t\t}\r\n\t\telse if ( PresetName === 'csv' )\r\n\t\t{\r\n\t\t\toptions.symbols = `,`; // Comma seperated values.\r\n\t\t\toptions.literal_delimiters = `\"`; // Use double quotes around values.\r\n\t\t\toptions.literal_escape_chars = `\\\\`; // Allow an escape character.\r\n\t\t\toptions.self_escape_literal_delimiters = true; // Allow self-delimiting double quotes.\r\n\t\t\toptions.resolve_literal_values = true;\r\n\t\t}\r\n\t\telse if ( PresetName === 'cli' )\r\n\t\t{\r\n\t\t\toptions.whitespace = ` \\t\\r\\n`;\r\n\t\t\toptions.symbols = `-:=`;\r\n\t\t\toptions.literal_delimiters = `'\"`;\r\n\t\t\toptions.literal_escape_chars = `\\\\`;\r\n\t\t\toptions.keywords = [];\r\n\t\t\toptions.discard_whitespace = true;\r\n\t\t\toptions.resolve_literal_values = true;\r\n\t\t\toptions.resolve_numeric_values = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new Error( `The parameter [PresetName] has an invalid value of [${PresetName}]. Must be one of: 'default', 'csv', or 'cli'.` );\r\n\t\t}\r\n\t\treturn options;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tTokenizeOptions: TokenizeOptions,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '502',\r\n\tmember_of: 'Token',\r\n\tname: 'Tokenize',\r\n\ttype: 'function',\r\n\treturns: 'object',\r\n\tdescription: [\r\n\t\t'Returns the parsed tokens.',\r\n\t],\r\n\tParameters: {\r\n\t\tText: {\r\n\t\t\tname: 'PresetName',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t\tdescription: [\r\n\t\t\t\t`To retrieve an options preset, use one of: 'csv', or 'cli'`,\r\n\t\t\t\t`You can leave this empty for the default options.`,\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Tokenize\n\t * @returns {object}\n\t * @description\n\t * Returns the parsed tokens.\n\t * @param {string} [PresetName]\n\t * To retrieve an options preset, use one of: 'csv', or 'cli'\n\t * You can leave this empty for the default options.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction Tokenize( Text, Options )\r\n\t{\r\n\t\t// Get the options.\r\n\t\tlet tokenize_options = Liquicode.Token.TokenizeOptions();\r\n\t\ttokenize_options = Liquicode.Object.Merge( tokenize_options, Options );\r\n\r\n\t\t// Tokenize the text.\r\n\t\tlet tokens = [];\r\n\t\tif ( !Text ) { return tokens; }\r\n\r\n\t\tlet ichar = 0;\r\n\t\tlet len = Text.length;\r\n\t\twhile ( true )\r\n\t\t{\r\n\t\t\t// Exit loop when reached end of text string.\r\n\t\t\tif ( ichar === len ) { break; }\r\n\r\n\t\t\t// Parse the next token.\r\n\t\t\tlet token = read_whitespace( tokenize_options, Text, ichar );\r\n\t\t\tif ( !token ) { token = read_symbol( tokenize_options, Text, ichar ); }\r\n\t\t\tif ( !token ) { token = read_literal( tokenize_options, Text, ichar ); }\r\n\t\t\tif ( !token ) { token = read_numeric( tokenize_options, Text, ichar ); }\r\n\t\t\tif ( !token ) { token = read_identifier( tokenize_options, Text, ichar ); }\r\n\t\t\tif ( !token ) { throw new Error( `Unable to continue parsing at location ${ichar}.` ); }\r\n\t\t\tichar += token.token.length;\r\n\r\n\t\t\t// Collect tokens.\r\n\t\t\tif (\r\n\t\t\t\ttoken\r\n\t\t\t\t&& ( token.type === TokenTypes.whitespace )\r\n\t\t\t\t&& tokenize_options.discard_whitespace\r\n\t\t\t) { continue; }\r\n\t\t\ttokens.push( token );\r\n\t\t}\r\n\r\n\t\t// Do required value conversions.\r\n\t\tconvert_values( tokenize_options, tokens );\r\n\r\n\t\t// Return the tokens.\r\n\t\treturn tokens;\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tconst TokenTypes =\r\n\t{\r\n\t\twhitespace: 'whitespace',\r\n\t\tsymbol: 'symbol',\r\n\t\tdelimiter: 'delimiter',\r\n\t\tliteral: 'literal',\r\n\t\tidentifier: 'identifier',\r\n\t\tnumeric: 'numeric',\r\n\t\tkeyword: 'keyword',\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction read_whitespace( Options, Text, StartAt )\r\n\t{\r\n\t\tlet ichar = StartAt;\r\n\t\tlet len = Text.length;\r\n\t\twhile ( Options.whitespace.includes( Text.charAt( ichar ) ) ) \r\n\t\t{\r\n\t\t\tichar++;\r\n\t\t\tif ( ichar === len ) { break; }\r\n\t\t}\r\n\t\tif ( ichar === StartAt ) { return null; }\r\n\t\tlet token = {\r\n\t\t\ttype: TokenTypes.whitespace,\r\n\t\t\ttoken: Text.substring( StartAt, ichar ),\r\n\t\t\tat: StartAt\r\n\t\t};\r\n\t\treturn token;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction read_symbol( Options, Text, StartAt )\r\n\t{\r\n\t\tif ( !Options.symbols.includes( Text.charAt( StartAt ) ) ) { return null; }\r\n\t\tlet token = {\r\n\t\t\ttype: TokenTypes.symbol,\r\n\t\t\ttoken: Text.charAt( StartAt ),\r\n\t\t\tat: StartAt\r\n\t\t};\r\n\t\treturn token;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction read_numeric( Options, Text, StartAt )\r\n\t{\r\n\t\tlet ichar = StartAt;\r\n\t\tlet len = Text.length;\r\n\t\twhile ( true ) \r\n\t\t{\r\n\t\t\tlet ch = Text.charAt( ichar );\r\n\t\t\tif (\r\n\t\t\t\t( ( ch >= '0' ) && ( ch <= '9' ) )\r\n\t\t\t\t|| ( ch === '.' ) )\r\n\t\t\t{ ichar++; }\r\n\t\t\telse\r\n\t\t\t{ break; }\r\n\t\t\tif ( ichar === len ) { break; }\r\n\t\t}\r\n\t\tif ( ichar === StartAt ) { return null; }\r\n\t\tlet token = {\r\n\t\t\ttype: TokenTypes.numeric,\r\n\t\t\ttoken: Text.substring( StartAt, ichar ),\r\n\t\t\tat: StartAt\r\n\t\t};\r\n\t\treturn token;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction read_literal( Options, Text, StartAt )\r\n\t{\r\n\t\tif ( !Options.literal_delimiters.includes( Text.charAt( StartAt ) ) ) { return null; }\r\n\t\tlet start_char = Text.charAt( StartAt );\r\n\t\tlet ichar = StartAt + 1;\r\n\t\tlet len = Text.length;\r\n\t\twhile ( true ) \r\n\t\t{\r\n\t\t\tif ( ichar >= len ) { break; }\r\n\t\t\tlet ch = Text.charAt( ichar );\r\n\t\t\t// Check for self escaping delimiters (e.g. \"Hello \"\"World\"\"!\").\r\n\t\t\tif ( Options.self_escape_literal_delimiters\r\n\t\t\t\t&& Options.literal_delimiters.includes( ch )\r\n\t\t\t\t&& ( ( ichar + 1 ) < len )\r\n\t\t\t\t&& ( ch === Text.charAt( ichar + 1 ) )\r\n\t\t\t) \r\n\t\t\t{\r\n\t\t\t\tichar++; // Take the first instance of the character.\r\n\t\t\t\tichar++; // Take the second instance of the character.\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Check for an escape character.\r\n\t\t\tif ( Options.literal_escape_chars.includes( ch ) )\r\n\t\t\t{\r\n\t\t\t\tichar++; // Take the escape character.\r\n\t\t\t\tichar++; // Take the escaped character.\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Check if we found the closing delimiter for this literal.\r\n\t\t\tif ( ch === start_char )\r\n\t\t\t{\r\n\t\t\t\t// Found the end of the literal.\r\n\t\t\t\tichar++; // Take the closing delimiter.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Check for the end of the given string.\r\n\t\t\tichar++;\r\n\t\t\tif ( ichar >= len ) { break; }\r\n\t\t}\r\n\t\tif ( ichar === StartAt ) { return null; }\r\n\t\tlet token = {\r\n\t\t\ttype: TokenTypes.literal,\r\n\t\t\ttoken: Text.substring( StartAt, ichar ),\r\n\t\t\tat: StartAt\r\n\t\t};\r\n\t\treturn token;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction read_identifier( Options, Text, StartAt )\r\n\t{\r\n\t\tlet ichar = StartAt;\r\n\t\tlet len = Text.length;\r\n\t\twhile ( true )\r\n\t\t{\r\n\t\t\tlet ch = Text.charAt( ichar );\r\n\t\t\tif ( Options.whitespace.includes( ch ) ) { break; }\r\n\t\t\tif ( Options.symbols.includes( ch ) ) { break; }\r\n\t\t\tif ( Options.literal_delimiters.includes( ch ) ) { break; }\r\n\t\t\tichar++;\r\n\t\t\tif ( ichar === len ) { break; }\r\n\t\t}\r\n\t\tif ( ichar === StartAt ) { return null; }\r\n\t\tlet token = {\r\n\t\t\ttype: TokenTypes.identifier,\r\n\t\t\ttoken: Text.substring( StartAt, ichar ),\r\n\t\t\tat: StartAt\r\n\t\t};\r\n\r\n\t\t// Detect keywords.\r\n\t\tlet is_keyword = false;\r\n\t\tif ( Options.keywords_are_case_sensitive )\r\n\t\t{\r\n\t\t\tis_keyword = Options.keywords.find(\r\n\t\t\t\tkeyword => ( keyword === token.token )\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tis_keyword = Options.keywords.find(\r\n\t\t\t\tkeyword => ( keyword.toLowerCase() === token.token.toLowerCase() )\r\n\t\t\t);\r\n\t\t}\r\n\t\tif ( is_keyword )\r\n\t\t{\r\n\t\t\ttoken.type = TokenTypes.keyword;\r\n\t\t}\r\n\r\n\t\t// Return the token.\r\n\t\treturn token;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\tfunction convert_values( Options, Tokens )\r\n\t{\r\n\t\tTokens.forEach(\r\n\t\t\t( token ) =>\r\n\t\t\t{\r\n\t\t\t\tif ( token.type === TokenTypes.numeric )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( Options.resolve_numeric_values )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( token.token.indexOf( '.' ) >= 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Convert to float value.\r\n\t\t\t\t\t\t\ttoken.token = parseFloat( token.token );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Convert to integer value.\r\n\t\t\t\t\t\t\ttoken.token = parseInt( token.token );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( token.type === TokenTypes.literal )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( Options.resolve_literal_values )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Remove the surrounding quote characters.\r\n\t\t\t\t\t\ttoken.token = token.token.substr( 1, token.token.length - 2 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t} );\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tTokenize: Tokenize,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '800',\r\n\tname: 'File',\r\n\ttype: 'namespace',\r\n\tsummary: 'Functions for manipulating files. (nodejs only)',\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\n * @public\n * @namespace File\n * @summary Functions for manipulating files. (nodejs only)\n*/\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tVisit: require( './810-File.Visit.js' )( Liquicode ).Visit,\r\n\t\tCountFiles: require( './811-File.CountFiles.js' )( Liquicode ).CountFiles,\r\n\t\tCountFolders: require( './812-File.CountFolders.js' )( Liquicode ).CountFolders,\r\n\t\tCopyFolder: require( './813-File.CopyFolder.js' )( Liquicode ).CopyFolder,\r\n\t\tDeleteFolder: require( './814-File.DeleteFolder.js' )( Liquicode ).DeleteFolder,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '810',\r\n\tmember_of: 'File',\r\n\tname: 'Visit',\r\n\ttype: 'function',\r\n\treturns: 'number',\r\n\tdescription: [\r\n\t\t'Scans a folder and calls the Visitor callback function for each folder/file encountered.',\r\n\t\t'Returns the number of folders/files visited.',\r\n\t],\r\n\tParameters: {\r\n\t\tStartFolder: {\r\n\t\t\tname: 'StartFolder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tFilePattern: {\r\n\t\t\tname: 'FilePattern',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tRecurse: {\r\n\t\t\tname: 'Recurse',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tVisitor: {\r\n\t\t\tname: 'Visitor',\r\n\t\t\ttype: 'function',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function Visit\n\t * @returns {number}\n\t * @description\n\t * Scans a folder and calls the Visitor callback function for each folder/file encountered.\n\t * Returns the number of folders/files visited.\n\t * @param {string} StartFolder\n\t * @param {string} [FilePattern]\n\t * @param {boolean} [Recurse]\n\t * @param {function} [Visitor]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tconst LIB_FS = require( 'fs' );\r\n\tconst LIB_PATH = require( 'path' );\r\n\r\n\r\n\tfunction Visit( StartFolder, FilePattern, Recurse, Visitor ) \r\n\t{\r\n\t\tStartFolder = Liquicode.Schema.ValidateValue( StartFolder, _Schema.Parameters.StartFolder, { coerce_values: true, throw_errors: true } );\r\n\t\tFilePattern = Liquicode.Schema.ValidateValue( FilePattern, _Schema.Parameters.FilePattern, { coerce_values: true, throw_errors: true } );\r\n\t\tRecurse = Liquicode.Schema.ValidateValue( Recurse, _Schema.Parameters.Recurse, { coerce_values: true, throw_errors: true } );\r\n\t\t// Visitor = Liquicode.Schema.ValidateValue( Visitor, Schema.Parameters.Visitor , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tif ( !LIB_FS.existsSync( StartFolder ) ) { return; }\r\n\t\tlet count = 0;\r\n\t\tlet elements = LIB_FS.readdirSync( StartFolder );\r\n\t\tfor ( let element_index = 0; element_index < elements.length; element_index++ )\r\n\t\t{\r\n\t\t\tlet element = elements[ element_index ];\r\n\t\t\tlet from_path = LIB_PATH.join( StartFolder, element );\r\n\t\t\tif ( LIB_FS.lstatSync( from_path ).isFile() )\r\n\t\t\t{\r\n\t\t\t\tif ( FilePattern ) \r\n\t\t\t\t{\r\n\t\t\t\t\tif ( Liquicode.Text.Matches( element, FilePattern ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( Visitor ) { Visitor( StartFolder, element ); }\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( Visitor ) { Visitor( StartFolder, element ); }\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if ( LIB_FS.lstatSync( from_path ).isDirectory() )\r\n\t\t\t{\r\n\t\t\t\tif ( !FilePattern ) \r\n\t\t\t\t{\r\n\t\t\t\t\tif ( Visitor ) { Visitor( from_path, null ); }\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t\tif ( Recurse )\r\n\t\t\t\t{\r\n\t\t\t\t\tcount += Visit( from_path, FilePattern, Recurse, Visitor );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tVisit: Visit,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '811',\r\n\tmember_of: 'File',\r\n\tname: 'CountFiles',\r\n\ttype: 'function',\r\n\treturns: 'number',\r\n\tdescription: [\r\n\t\t'Scans a folder and calls the Visitor callback function for each folder/file encountered.',\r\n\t\t'Returns the number of folders/files visited.',\r\n\t],\r\n\tParameters: {\r\n\t\tStartFolder: {\r\n\t\t\tname: 'StartFolder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tFilePattern: {\r\n\t\t\tname: 'FilePattern',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '*',\r\n\t\t},\r\n\t\tRecurse: {\r\n\t\t\tname: 'Recurse',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function CountFiles\n\t * @returns {number}\n\t * @description\n\t * Scans a folder and calls the Visitor callback function for each folder/file encountered.\n\t * Returns the number of folders/files visited.\n\t * @param {string} StartFolder\n\t * @param {string} [FilePattern=\"*\"]\n\t * @param {boolean} [Recurse]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction CountFiles( StartFolder, FilePattern, Recurse ) \r\n\t{\r\n\t\tStartFolder = Liquicode.Schema.ValidateValue( StartFolder, _Schema.Parameters.StartFolder , { coerce_values: true, throw_errors: true });\r\n\t\tFilePattern = Liquicode.Schema.ValidateValue( FilePattern, _Schema.Parameters.FilePattern, { coerce_values: true, throw_errors: true } );\r\n\t\tRecurse = Liquicode.Schema.ValidateValue( Recurse, _Schema.Parameters.Recurse , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tlet count = Liquicode.File.Visit( StartFolder, FilePattern, Recurse );\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tCountFiles: CountFiles,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '812',\r\n\tmember_of: 'File',\r\n\tname: 'CountFolders',\r\n\ttype: 'function',\r\n\treturns: 'number',\r\n\tdescription: [\r\n\t\t'Scans a folder and calls the Visitor callback function for each folder/file encountered.',\r\n\t\t'Returns the number of folders/files visited.',\r\n\t],\r\n\tParameters: {\r\n\t\tStartFolder: {\r\n\t\t\tname: 'StartFolder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tRecurse: {\r\n\t\t\tname: 'Recurse',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function CountFolders\n\t * @returns {number}\n\t * @description\n\t * Scans a folder and calls the Visitor callback function for each folder/file encountered.\n\t * Returns the number of folders/files visited.\n\t * @param {string} StartFolder\n\t * @param {boolean} [Recurse]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction CountFolders( StartFolder, Recurse ) \r\n\t{\r\n\t\tStartFolder = Liquicode.Schema.ValidateValue( StartFolder, _Schema.Parameters.StartFolder, { coerce_values: true, throw_errors: true } );\r\n\t\tRecurse = Liquicode.Schema.ValidateValue( Recurse, _Schema.Parameters.Recurse , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tlet folder_count = 0;\r\n\t\tLiquicode.File.Visit( StartFolder, '', Recurse,\r\n\t\t\tfunction ( Folder, Filename )\r\n\t\t\t{\r\n\t\t\t\tif ( Folder && !Filename )\r\n\t\t\t\t{\r\n\t\t\t\t\tfolder_count++;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\treturn folder_count;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tCountFolders: CountFolders,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '813',\r\n\tmember_of: 'File',\r\n\tname: 'CopyFolder',\r\n\ttype: 'function',\r\n\treturns: 'number',\r\n\tdescription: [\r\n\t\t'Copies files from one folder to another.',\r\n\t\t'Returns the number of files copied.',\r\n\t],\r\n\tParameters: {\r\n\t\tFromFolder: {\r\n\t\t\tname: 'FromFolder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tToFolder: {\r\n\t\t\tname: 'ToFolder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tFilePattern: {\r\n\t\t\tname: 'FilePattern',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: '*',\r\n\t\t},\r\n\t\tOverwrite: {\r\n\t\t\tname: 'Overwrite',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tRecurse: {\r\n\t\t\tname: 'Recurse',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function CopyFolder\n\t * @returns {number}\n\t * @description\n\t * Copies files from one folder to another.\n\t * Returns the number of files copied.\n\t * @param {string} FromFolder\n\t * @param {string} ToFolder\n\t * @param {string} [FilePattern=\"*\"]\n\t * @param {boolean} [Overwrite]\n\t * @param {boolean} [Recurse]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction CopyFolder( FromFolder, ToFolder, FilePattern, Overwrite, Recurse ) \r\n\t{\r\n\t\tFromFolder = Liquicode.Schema.ValidateValue( FromFolder, _Schema.Parameters.FromFolder, { coerce_values: true, throw_errors: true } );\r\n\t\tToFolder = Liquicode.Schema.ValidateValue( ToFolder, _Schema.Parameters.ToFolder, { coerce_values: true, throw_errors: true } );\r\n\t\tFilePattern = Liquicode.Schema.ValidateValue( FilePattern, _Schema.Parameters.FilePattern, { coerce_values: true, throw_errors: true } );\r\n\t\tOverwrite = Liquicode.Schema.ValidateValue( Overwrite, _Schema.Parameters.Overwrite , { coerce_values: true, throw_errors: true });\r\n\t\tRecurse = Liquicode.Schema.ValidateValue( Recurse, _Schema.Parameters.Recurse , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tif ( !LIB_FS.existsSync( FromFolder ) ) { return 0; }\r\n\t\tLIB_FS.mkdirSync( ToFolder, { recursive: true } );\r\n\t\tlet count = 0;\r\n\t\tlet elements = LIB_FS.readdirSync( FromFolder );\r\n\t\tfor ( let element_index = 0; element_index < elements.length; element_index++ )\r\n\t\t{\r\n\t\t\tlet element = elements[ element_index ];\r\n\t\t\tlet from_path = LIB_PATH.join( FromFolder, element );\r\n\t\t\tlet to_path = LIB_PATH.join( ToFolder, element );\r\n\t\t\tif ( LIB_FS.lstatSync( from_path ).isFile() )\r\n\t\t\t{\r\n\t\t\t\tif ( !LIB_FS.existsSync( to_path ) || Overwrite ) \r\n\t\t\t\t{\r\n\t\t\t\t\tLIB_FS.copyFileSync( from_path, to_path );\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if ( Recurse && LIB_FS.lstatSync( from_path ).isDirectory() )\r\n\t\t\t{\r\n\t\t\t\tcount += CopyFolder( from_path, to_path, Overwrite, Recurse );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tCopyFolder: CopyFolder,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '814',\r\n\tmember_of: 'File',\r\n\tname: 'DeleteFolder',\r\n\ttype: 'function',\r\n\treturns: 'number',\r\n\tdescription: [\r\n\t\t'Deletes a folder and all of its sub-folders and files.',\r\n\t\t'Returns the number of folders and files deleted.',\r\n\t],\r\n\tParameters: {\r\n\t\tFolder: {\r\n\t\t\tname: 'Folder',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\t// FilePattern: {\r\n\t\t// \tname: 'FilePattern',\r\n\t\t// \ttype: 'string',\r\n\t\t// \trequired: false,\r\n\t\t// \tdefault: '',\r\n\t\t// },\r\n\t\tRecurse: {\r\n\t\t\tname: 'Recurse',\r\n\t\t\ttype: 'boolean',\r\n\t\t\trequired: false,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function DeleteFolder\n\t * @returns {number}\n\t * @description\n\t * Deletes a folder and all of its sub-folders and files.\n\t * Returns the number of folders and files deleted.\n\t * @param {string} Folder\n\t * @param {boolean} [Recurse]\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tfunction DeleteFolder( Folder, Recurse ) \r\n\t{\r\n\t\tFolder = Liquicode.Schema.ValidateValue( Folder, _Schema.Parameters.Folder, { coerce_values: true, throw_errors: true } );\r\n\t\tFilePattern = Liquicode.Schema.ValidateValue( FilePattern, _Schema.Parameters.FilePattern, { coerce_values: true, throw_errors: true } );\r\n\t\tRecurse = Liquicode.Schema.ValidateValue( Recurse, _Schema.Parameters.Recurse , { coerce_values: true, throw_errors: true });\r\n\r\n\t\tif ( !LIB_FS.existsSync( Folder ) ) { return 0; }\r\n\t\tlet count = 0;\r\n\t\tlet elements = LIB_FS.readdirSync( Folder );\r\n\t\tfor ( let element_index = 0; element_index < elements.length; element_index++ )\r\n\t\t{\r\n\t\t\tlet element = elements[ element_index ];\r\n\t\t\tlet from_path = LIB_PATH.join( Folder, element );\r\n\t\t\tif ( LIB_FS.lstatSync( from_path ).isFile() )\r\n\t\t\t{\r\n\t\t\t\tLIB_FS.unlinkSync( from_path );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\telse if ( Recurse && LIB_FS.lstatSync( from_path ).isDirectory() )\r\n\t\t\t{\r\n\t\t\t\tcount += DeleteFolder( from_path, Recurse );\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Delete this folder.\r\n\t\tif ( Recurse )\r\n\t\t{\r\n\t\t\tlet elements = LIB_FS.readdirSync( Folder );\r\n\t\t\tif ( !elements.length ) { LIB_FS.rmdirSync( Folder ); }\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tDeleteFolder: DeleteFolder,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet _Schema = {\r\n\tid: '900',\r\n\tname: 'Net',\r\n\ttype: 'namespace',\r\n\tsummary: 'Functions for working with networks. (nodejs only)',\r\n};\r\n\r\n\r\n//-start-jsdoc---------------------------------------------------------\r\n/**\r\n * @public\r\n * @namespace Net\r\n * @summary Functions for working with networks. (nodejs only)\r\n*/\r\n//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\treturn {\r\n\t\t_Schema: _Schema,\r\n\t\tAsyncDownloadFile: require( './910-Net.AsyncDownloadFile.js' )( Liquicode ).AsyncDownloadFile,\r\n\t\tAsyncGetRequest: require( './920-Net.AsyncGetRequest.js' )( Liquicode ).AsyncGetRequest,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '910',\r\n\tmember_of: 'Net',\r\n\tname: 'AsyncDownloadFile',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: `Download a file from an url.`,\r\n\tParameters: {},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function AsyncDownloadFile\n\t * @returns {string}\n\t * @description\n\t * Download a file from an url.\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tconst LIB_HTTP = require( 'http' );\r\n\tconst LIB_HTTPS = require( 'https' );\r\n\r\n\r\n\tfunction AsyncDownloadFile( Url, Filename )\r\n\t{\r\n\t\tlet http_engine = null;\r\n\t\tif ( Url.toLowerCase().startsWith( 'http:' ) ) { http_engine = LIB_HTTP; }\r\n\t\telse if ( Url.toLowerCase().startsWith( 'https:' ) ) { http_engine = LIB_HTTPS; }\r\n\t\telse { throw new Error( `Unsupported protocol. Must be either http or https.` ); }\r\n\r\n\t\treturn new Promise(\r\n\t\t\t( resolve, reject ) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\thttp_engine.get(\r\n\t\t\t\t\t\tUrl,\r\n\t\t\t\t\t\tfunction ( response ) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst file_stream = LIB_FS.createWriteStream( Filename );\r\n\t\t\t\t\t\t\tresponse.pipe( file_stream );\r\n\t\t\t\t\t\t\tfile_stream.on(\r\n\t\t\t\t\t\t\t\t'finish',\r\n\t\t\t\t\t\t\t\tfunction ()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfile_stream.close();\r\n\t\t\t\t\t\t\t\t\tresolve( true );\r\n\t\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( error )\r\n\t\t\t\t{\r\n\t\t\t\t\treject( error );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tAsyncDownloadFile: AsyncDownloadFile,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\n//---------------------------------------------------------------------\r\nlet Schema = {\r\n\tid: '920',\r\n\tmember_of: 'Net',\r\n\tname: 'AsyncGetRequest',\r\n\ttype: 'function',\r\n\treturns: 'string',\r\n\tdescription: `Make an http get request for a an url.`,\r\n\tParameters: {\r\n\t\tUrl: {\r\n\t\t\tname: 'Url',\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n};\r\n\r\n\r\n//---------------------------------------------------------------------\r\nmodule.exports = function ( Liquicode )\r\n{\r\n\r\n\r\n\t//-start-jsdoc---------------------------------------------------------\r\n\t/**\n\t * @public\n\t * @function AsyncGetRequest\n\t * @returns {string}\n\t * @description\n\t * Make an http get request for a an url.\n\t * @param {string} Url\n\t*/\n\t//-end-jsdoc-----------------------------------------------------------\r\n\r\n\r\n\tconst LIB_HTTP = require( 'http' );\r\n\tconst LIB_HTTPS = require( 'https' );\r\n\r\n\r\n\tfunction AsyncGetRequest( Url )\r\n\t{\r\n\t\tlet http_engine = null;\r\n\t\tif ( Url.toLowerCase().startsWith( 'http:' ) ) { http_engine = LIB_HTTP; }\r\n\t\telse if ( Url.toLowerCase().startsWith( 'https:' ) ) { http_engine = LIB_HTTPS; }\r\n\t\telse { throw new Error( `Unsupported protocol. Must be http or https.` ); }\r\n\r\n\t\treturn new Promise(\r\n\t\t\t( resolve, reject ) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\thttp_engine.get(\r\n\t\t\t\t\t\tUrl,\r\n\t\t\t\t\t\tfunction ( response ) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresponse.on( 'data', data =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresolve( data );\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( error )\r\n\t\t\t\t{\r\n\t\t\t\t\treject( error );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t};\r\n\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// Return the module exports.\r\n\treturn {\r\n\t\t_Schema: Schema,\r\n\t\tAsyncGetRequest: AsyncGetRequest,\r\n\t};\r\n};\r\n","\"use strict\";\r\n\r\n\r\nvar Liquicode = {};\r\n\r\nLiquicode.version = 'v0.0.1';\r\nLiquicode.environment = 'node';\r\n\r\nLiquicode.Schema = require( './000-Schema/000-Schema.js' )( Liquicode );\r\nLiquicode.Object = require( './100-Object/100-Object.js' )( Liquicode );\r\nLiquicode.Text = require( './200-Text/200-Text.js' )( Liquicode );\r\nLiquicode.Date = require( './400-Date/400-Date.js' )( Liquicode );\r\nLiquicode.Token = require( './500-Token/500-Token.js' )( Liquicode );\r\nLiquicode.File = require( './800-File/800-File.js' )( Liquicode );\r\nLiquicode.Net = require( './900-Net/900-Net.js' )( Liquicode );\r\n\r\ndelete Liquicode.Schema._Schema;\r\ndelete Liquicode.Object._Schema;\r\ndelete Liquicode.Text._Schema;\r\ndelete Liquicode.Date._Schema;\r\ndelete Liquicode.Token._Schema;\r\ndelete Liquicode.File._Schema;\r\ndelete Liquicode.Net._Schema;\r\n\r\n\r\nmodule.exports = Liquicode;\r\n\r\n","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/liquicode-node.js\");\n",""],"names":[],"sourceRoot":""}